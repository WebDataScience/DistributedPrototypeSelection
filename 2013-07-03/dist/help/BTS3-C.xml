<method>

	<name>Bootstrap 3 Method</name>

	<reference>  
		<ref>Hamamoto, Y., Uchimura, S., Tomita, S. A bootstrap technique for nearest neighbor classifier design (1997) IEEE Transactions on Pattern Analysis and Machine Intelligence, 19:1, 73‚Äê79.</ref>
		<ref>Bezdek J. C., Kuncheva L. I., Nearest prototype classifier designs: an experimiental study. International Journal of Intelligent Systems, vol. 16, pp. 1445-1473, 2001</ref>
	</reference>

	<generalDescription>  

		<type>Preprocess Method. Data Reduction. Prototype Generation. Noise Filter.</type>

		<objective>Reduce the size of the training set without losing precision or accuracy in order to a posterior classification</objective>

		<howWork>
		1. For each random trial
		2. Select a random sample.
  	3. Merge each point (in selected set) with its k nearest-neighbors.
  	4. Do test with the 1-NN rule on the original data set to see which class is the best to each prototype of the merged prototype set.
  	5. If is the best reduced set, keep it. Go to 1.
  	6. Algorithm ends when random trials have terminated. Return the best reduced set.	
				</howWork>

		<parameterSpec>  
			<param>Percentage of prototypes: Real value. Desired size of the resulting set as percentage of training set size.</param>
			<param>Number of neighbors: Integer value. Number of nearest instances considered to classify an example using the K-Nearest Neighbor Rule (k)</param>
			<param>Random trials: Integer value. Number of cycles of the algorithm.</param>
		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>No</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Generation
Method: PG-BTS3
Dataset: ecoli
Training set: ecoli-10-1tra.dat
Parameters: default values

We can see output set in Experiment\Results\PG-BTS3:

@relation  unknow
@attribute mcg real[0.0,0.89]
@attribute gvh real[0.16,1.0]
@attribute lip real[0.48,1.0]
@attribute chg real[0.5,1.0]
@attribute aac real[0.0,0.88]
@attribute alm1 real[0.03,1.0]
@attribute alm2 real[0.0,0.99]
@attribute class{cp,im,pp,imU,om,omL,imL,imS}
@inputs mcg,gvh,lip,chg,aac,alm1,alm2
@outputs class
0.43, 0.4, 0.48, 0.5, 0.39, 0.28, 0.39, cp
0.27, 0.42000000000000004, 0.48, 0.5, 0.37, 0.38, 0.43, cp
0.43, 0.4, 0.48, 0.5, 0.39, 0.28, 0.39, cp
0.17, 0.39, 0.48, 0.5, 0.53, 0.30000000000000004, 0.39, cp
0.25, 0.4, 0.48, 0.5, 0.47, 0.33000000000000007, 0.42, cp
0.25, 0.4, 0.48, 0.5, 0.47, 0.33000000000000007, 0.42, cp
0.48, 0.49, 0.48, 0.5, 0.52, 0.77, 0.71, im
0.61, 0.52, 0.48, 0.5, 0.54, 0.67, 0.52, im
0.48, 0.49, 0.48, 0.5, 0.52, 0.77, 0.71, im
0.71, 0.71, 0.48, 0.5, 0.4, 0.54, 0.39, pp
0.63, 0.65, 0.48, 0.5, 0.39, 0.44000000000000006, 0.35, pp
0.78, 0.44000000000000006, 0.48, 0.5, 0.45, 0.73, 0.68, imU
0.32, 0.42000000000000004, 0.48, 0.5, 0.35, 0.28, 0.38, cp
0.68, 0.82, 0.48, 0.5, 0.38, 0.65, 0.56, pp
0.32, 0.42000000000000004, 0.48, 0.5, 0.35, 0.28, 0.38, cp

</example>

</method>
