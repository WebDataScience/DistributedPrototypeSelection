<method>

	<name>Classification Based on Associations (CBA)</name>

	<reference>
		<ref>B. Liu, W. Hsu, and Y. Ma. Integrating Classification and Association Rule Mining. In Proceedings of KDD-98, 1998. </ref>
	</reference>

	<generalDescription>  

		<type>Classification model by association rules.</type>

		<objective>To integrate two mining techniques (association rule mining and classification rule mining) by mining a special subset of association rules, called class association rules (CARs).</objective>

		<howWork>
			This method proposes an integration between association rule mining and classification rule mining by means an efficient way such as it does not suffer a loss of performance (accuracy of the resultant classifier).
			The integration is done by focusing on a special subset of association rules whose right-hand-side are restricted to the classification class attribute (Class Association Rules, CARs).
			Data mining in the proposed associative classification framework consists of three steps:
			
				* discretizing continuous attributes, if any 
					In this implementation we employ a previous Fayyad Discretization on the values.
					
				* generating all the class association rules (CARs) [CBA-RuleGenerator]
						The basis here is to find all "ruleitems" that have support above a minimum threshold "minsup".
						A ruleitem is of the form [condset,y] where "condset" is a set of items (pairs [attribute,value]) and "y" is a class label.
						The support count of the "condset" is the number of cases (examples) in D that contain the condset.
						The support count of the "ruleitem" is the number of cases in D that contain the condset an are labeled with class "y".
						Example:
							We have 10 examples, two of them are
							[{(A,1),(B,1)},(class: 1)] condsupCount:3, rulesupCount:2
							[{(A,1),(B,1)},(class: 2)] condsupCount:3, rulesupCount:1
							Those are two ruleitems with the same condset (and of course, the same support count of the condset).
							However, if we set a minimum support threshold of 20%, we just accept the first one and we will say that it is frequent.
							Also, if the rule's confidence (computed as rulesupCount/condsupCount*100) is higher than a minimum given threshold, we will say it is accurate.
						Therefore, the set of class association rules (CARs) thus consists of all the possible rules (PRs) that are both frequent and accurate.
				
				* pruning CARs (optional)
					We can reduce the number of rules by using the pessimistic error rate based pruning method used in C4.5.
					
				* building a classifier based on the generated CARs [CBA-ClassifierBuilder]
					The basic idea of the algorithm is to choose a set of high precedence rules in Rulebase to cover the whole training dataset.
					A rule has higher "a" precedence than other "b" if:
						1. confidence of a is greater than that of b
						2. same confidence but support of a is greater than that of b
						3. same confidence and support but a is generated earlier.
					Our classifier is of the following format:
						[rule1,rule2,rule3,...,ruleN, defaultClass]
					The basic steps are:
						Step1: Sort the set of generated rules acoding to the precedence order
						Step2: Select rules for the classifier from the set following the sorted sequence by selecting those rules which cover examples.
						Step3: Discard those rules in C that do not improve the accuracy of the classifier.
		</howWork>

		<parameterSpec>  
			<param>MinSupport = Is the threshold for the support value to create the items.</param>
			<param>MinConfidence = Is the threshold for the confidence value to create the rules.</param>
			<param>Wether_pruning_rules_or_not = Parameter to establish wether we will use a pruned version of the RuleSet (prCAR) [value:1] to classify or not (CAR) [value:0].</param>
			<param>Limit_Rules = Is the maximum number of rules to be generated. It is useful for extremelly large databases where the number of generated rules could be impossible to manage. (Value:0 means no limit of rules) </param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>No</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>

	</generalDescription>

	<example>
	Problem type: Associative Classification 
	Method: CBA
	Dataset: pima
	Training set: pima-10-1tra.dat
	Test set: pima-10-1tst.dat
	Test Show results: Vis-Clas-Check
	Parameters: 
		default values

After the execution of RunKeel.jar we can see into the experiment\results\Vis-Clas-Check folder the classification results for the test and train set:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=0.7142857142857143 N/C=0.0 
Fold 1 : CORRECT=0.7792207792207793 N/C=0.0 
Fold 2 : CORRECT=0.7532467532467533 N/C=0.0 
Fold 3 : CORRECT=0.7012987012987013 N/C=0.0 
Fold 4 : CORRECT=0.6493506493506493 N/C=0.0 
Fold 5 : CORRECT=0.7402597402597403 N/C=0.0 
Fold 6 : CORRECT=0.7532467532467533 N/C=0.0 
Fold 7 : CORRECT=0.7792207792207793 N/C=0.0 
Fold 8 : CORRECT=0.7894736842105263 N/C=0.0 
Fold 9 : CORRECT=0.7105263157894737 N/C=0.0 
Global Classification Error + N/C:
0.262987012987013 
stddev Global Classification Error + N/C:
0.04126863247322881 
Correctly classified:
0.737012987012987 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.7959479015918958 N/C=0.0 
Fold 1 : CORRECT=0.7930535455861071 N/C=0.0 
Fold 2 : CORRECT=0.7800289435600579 N/C=0.0 
Fold 3 : CORRECT=0.7916063675832128 N/C=0.0 
Fold 4 : CORRECT=0.808972503617945 N/C=0.0 
Fold 5 : CORRECT=0.7742402315484804 N/C=0.0 
Fold 6 : CORRECT=0.7930535455861071 N/C=0.0 
Fold 7 : CORRECT=0.804630969609262 N/C=0.0 
Fold 8 : CORRECT=0.8034682080924855 N/C=0.0 
Fold 9 : CORRECT=0.8034682080924855 N/C=0.0 
Global Classification Error + N/C:
0.20515295751319612 
stddev Global Classification Error + N/C:
0.010517921442101983 
Correctly classified:
0.7948470424868039 
Global N/C:
0.0 

We can also see the output and target classes for each case of the test set (result0.tst) in Experiment\Results\Clas-CBA:

@relation   .a/pima/pima
@attribute 'preg'{0,1}
@attribute 'plas'{0,1,2,3}
@attribute 'pres'{0}
@attribute 'skin'{0}
@attribute 'insu'{0,1,2}
@attribute 'mass'{0,1}
@attribute 'pedi'{0}
@attribute 'age'{0,1}
@attribute 'class'{tested_negative,tested_positive}
@inputs 'preg','plas','pres','skin','insu','mass','pedi','age'
@outputs 'class'
@data
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative

@Number of rules: 32 Number of Antecedents by rule: 2.5483870967741935

1: 'preg' IS 0 AND 'plas' IS 0 AND 'mass' IS 0: tested_negative
2: 'plas' IS 0 AND 'insu' IS 0 AND 'age' IS 0: tested_negative
3: 'plas' IS 0 AND 'insu' IS 0 AND 'mass' IS 0: tested_negative
4: 'plas' IS 1 AND 'insu' IS 2 AND 'age' IS 0: tested_negative
5: 'plas' IS 1 AND 'insu' IS 0 AND 'mass' IS 0 AND 'age' IS 0: tested_negative
6: 'preg' IS 1 AND 'plas' IS 3 AND 'insu' IS 2: tested_positive
7: 'preg' IS 0 AND 'plas' IS 3 AND 'insu' IS 2 AND 'mass' IS 1 AND 'age' IS 0: tested_positive
8: 'preg' IS 0 AND 'plas' IS 1 AND 'insu' IS 0 AND 'mass' IS 0: tested_negative
9: 'plas' IS 0 AND 'age' IS 0: tested_negative
10: 'preg' IS 0 AND 'plas' IS 0 AND 'insu' IS 1: tested_negative
11: 'mass' IS 0 AND 'age' IS 0: tested_negative
12: 'plas' IS 0 AND 'insu' IS 1: tested_negative
13: 'preg' IS 0 AND 'plas' IS 1 AND 'mass' IS 0: tested_negative
14: 'plas' IS 3 AND 'insu' IS 2 AND 'mass' IS 1: tested_positive
15: 'plas' IS 3 AND 'mass' IS 1 AND 'age' IS 0: tested_positive
16: 'preg' IS 0 AND 'plas' IS 0: tested_negative
17: 'plas' IS 0: tested_negative
18: 'plas' IS 3 AND 'insu' IS 2: tested_positive
19: 'insu' IS 1 AND 'mass' IS 0: tested_negative
20: 'preg' IS 0 AND 'mass' IS 0: tested_negative
21: 'preg' IS 1 AND 'plas' IS 3 AND 'mass' IS 1 AND 'age' IS 1: tested_positive
22: 'plas' IS 1 AND 'mass' IS 0: tested_negative
23: 'insu' IS 1 AND 'age' IS 0: tested_negative
24: 'plas' IS 3 AND 'mass' IS 1: tested_positive
25: 'preg' IS 0 AND 'plas' IS 1 AND 'age' IS 0: tested_negative
26: 'preg' IS 0 AND 'insu' IS 1: tested_negative
27: 'mass' IS 0: tested_negative
28: 'insu' IS 1: tested_negative
29: 'preg' IS 1 AND 'insu' IS 2 AND 'mass' IS 1: tested_positive
30: 'preg' IS 0 AND 'age' IS 0: tested_negative
31: 'preg' IS 0 AND 'plas' IS 1: tested_negative
Default: tested_positive


@supp and conf:

1: supp: 0.09985528219971057 AND conf: 1.0
2: supp: 0.06512301013024602 AND conf: 1.0
3: supp: 0.05788712011577424 AND conf: 1.0
4: supp: 0.03907380607814761 AND conf: 1.0
5: supp: 0.030390738060781478 AND conf: 1.0
6: supp: 0.015918958031837915 AND conf: 1.0
7: supp: 0.01447178002894356 AND conf: 1.0
8: supp: 0.04486251808972504 AND conf: 0.9687500000000001
9: supp: 0.1548480463096961 AND conf: 0.9639639639639639
10: supp: 0.10709117221418235 AND conf: 0.9610389610389611
11: supp: 0.1649782923299566 AND conf: 0.957983193277311
12: supp: 0.11577424023154848 AND conf: 0.9523809523809523
13: supp: 0.07670043415340087 AND conf: 0.9464285714285715
14: supp: 0.04775687409551375 AND conf: 0.9428571428571428
15: supp: 0.023154848046309694 AND conf: 0.9411764705882352
16: supp: 0.20260492040520983 AND conf: 0.9395973154362416
17: supp: 0.23444283646888567 AND conf: 0.9257142857142857
18: supp: 0.05065123010130246 AND conf: 0.9210526315789473
19: supp: 0.08104196816208394 AND conf: 0.9180327868852459
20: supp: 0.22431259044862517 AND conf: 0.9171597633136094
21: supp: 0.027496382054992764 AND conf: 0.9047619047619047
22: supp: 0.09406657018813314 AND conf: 0.9027777777777777
23: supp: 0.15195369030390737 AND conf: 0.8974358974358974
24: supp: 0.0824891461649783 AND conf: 0.8906250000000001
25: supp: 0.1476121562952243 AND conf: 0.8869565217391304
26: supp: 0.191027496382055 AND conf: 0.88
27: supp: 0.2619392185238784 AND conf: 0.8786407766990291
28: supp: 0.21273516642547033 AND conf: 0.8596491228070176
29: supp: 0.04486251808972504 AND conf: 0.8378378378378378
30: supp: 0.37771345875542695 AND conf: 0.8130841121495327
31: supp: 0.2170767004341534 AND conf: 0.8064516129032259




This is the same example if we choose to not prune CARs:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=0.7142857142857143 N/C=0.0 
Fold 1 : CORRECT=0.7792207792207793 N/C=0.0 
Fold 2 : CORRECT=0.7532467532467533 N/C=0.0 
Fold 3 : CORRECT=0.7142857142857143 N/C=0.0 
Fold 4 : CORRECT=0.6623376623376623 N/C=0.0 
Fold 5 : CORRECT=0.7792207792207793 N/C=0.0 
Fold 6 : CORRECT=0.7662337662337663 N/C=0.0 
Fold 7 : CORRECT=0.7922077922077921 N/C=0.0 
Fold 8 : CORRECT=0.8026315789473684 N/C=0.0 
Fold 9 : CORRECT=0.7105263157894737 N/C=0.0 
Global Classification Error + N/C:
0.2525803144224197 
stddev Global Classification Error + N/C:
0.04273249658915568 
Correctly classified:
0.7474196855775803 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.7959479015918958 N/C=0.0 
Fold 1 : CORRECT=0.7959479015918958 N/C=0.0 
Fold 2 : CORRECT=0.7800289435600579 N/C=0.0 
Fold 3 : CORRECT=0.7930535455861071 N/C=0.0 
Fold 4 : CORRECT=0.8147612156295224 N/C=0.0 
Fold 5 : CORRECT=0.784370477568741 N/C=0.0 
Fold 6 : CORRECT=0.7930535455861071 N/C=0.0 
Fold 7 : CORRECT=0.8104196816208393 N/C=0.0 
Fold 8 : CORRECT=0.8034682080924855 N/C=0.0 
Fold 9 : CORRECT=0.8049132947976878 N/C=0.0 
Global Classification Error + N/C:
0.20240352843746598 
stddev Global Classification Error + N/C:
0.010379466379390172 
Correctly classified:
0.797596471562534 
Global N/C:
0.0 


And again the output and target classes for each case of the test set (result0.tst) in Experiment\Results\Clas-CBA:

@relation   .a/pima/pima
@attribute 'preg'{0,1}
@attribute 'plas'{0,1,2,3}
@attribute 'pres'{0}
@attribute 'skin'{0}
@attribute 'insu'{0,1,2}
@attribute 'mass'{0,1}
@attribute 'pedi'{0}
@attribute 'age'{0,1}
@attribute 'class'{tested_negative,tested_positive}
@inputs 'preg','plas','pres','skin','insu','mass','pedi','age'
@outputs 'class'
@data
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative

@Number of rules: 38 Number of Antecedents by rule: 2.7027027027027026

1: 'preg' IS 0 AND 'plas' IS 0 AND 'mass' IS 0: tested_negative
2: 'plas' IS 0 AND 'insu' IS 0 AND 'age' IS 0: tested_negative
3: 'plas' IS 0 AND 'insu' IS 0 AND 'mass' IS 0: tested_negative
4: 'plas' IS 1 AND 'insu' IS 2 AND 'age' IS 0: tested_negative
5: 'plas' IS 1 AND 'insu' IS 0 AND 'mass' IS 0 AND 'age' IS 0: tested_negative
6: 'insu' IS 2 AND 'mass' IS 0 AND 'age' IS 0: tested_negative
7: 'preg' IS 0 AND 'plas' IS 0 AND 'insu' IS 1 AND 'age' IS 1: tested_negative
8: 'preg' IS 1 AND 'plas' IS 3 AND 'insu' IS 2: tested_positive
9: 'plas' IS 3 AND 'insu' IS 2 AND 'mass' IS 1 AND 'age' IS 0: tested_positive
10: 'preg' IS 0 AND 'insu' IS 1 AND 'mass' IS 0 AND 'age' IS 1: tested_negative
11: 'plas' IS 1 AND 'mass' IS 0 AND 'age' IS 0: tested_negative
12: 'preg' IS 0 AND 'plas' IS 1 AND 'insu' IS 0 AND 'mass' IS 0: tested_negative
13: 'insu' IS 0 AND 'mass' IS 0 AND 'age' IS 0: tested_negative
14: 'plas' IS 0 AND 'age' IS 0: tested_negative
15: 'mass' IS 0 AND 'age' IS 0: tested_negative
16: 'plas' IS 0 AND 'insu' IS 1: tested_negative
17: 'preg' IS 0 AND 'plas' IS 1 AND 'mass' IS 0: tested_negative
18: 'plas' IS 3 AND 'insu' IS 2 AND 'mass' IS 1: tested_positive
19: 'plas' IS 3 AND 'mass' IS 1 AND 'age' IS 0: tested_positive
20: 'preg' IS 0 AND 'plas' IS 0: tested_negative
21: 'plas' IS 0 AND 'insu' IS 0: tested_negative
22: 'plas' IS 3 AND 'insu' IS 2 AND 'age' IS 1: tested_positive
23: 'insu' IS 1 AND 'mass' IS 0: tested_negative
24: 'preg' IS 0 AND 'mass' IS 0: tested_negative
25: 'plas' IS 1 AND 'insu' IS 1 AND 'mass' IS 1 AND 'age' IS 1: tested_negative
26: 'plas' IS 1 AND 'insu' IS 0 AND 'mass' IS 0: tested_negative
27: 'preg' IS 1 AND 'plas' IS 3 AND 'mass' IS 1: tested_positive
28: 'insu' IS 1 AND 'age' IS 0: tested_negative
29: 'plas' IS 3 AND 'mass' IS 1: tested_positive
30: 'preg' IS 0 AND 'plas' IS 1 AND 'age' IS 0: tested_negative
31: 'insu' IS 0 AND 'mass' IS 0: tested_negative
32: 'preg' IS 0 AND 'insu' IS 1: tested_negative
33: 'mass' IS 0: tested_negative
34: 'insu' IS 1: tested_negative
35: 'preg' IS 1 AND 'insu' IS 2 AND 'mass' IS 1: tested_positive
36: 'preg' IS 0 AND 'age' IS 0: tested_negative
37: 'preg' IS 0 AND 'plas' IS 1: tested_negative
Default: tested_positive


@supp and conf:

1: supp: 0.09985528219971057 AND conf: 1.0
2: supp: 0.06512301013024602 AND conf: 1.0
3: supp: 0.05788712011577424 AND conf: 1.0
4: supp: 0.03907380607814761 AND conf: 1.0
5: supp: 0.030390738060781478 AND conf: 1.0
6: supp: 0.02170767004341534 AND conf: 1.0
7: supp: 0.020260492040520984 AND conf: 1.0
8: supp: 0.015918958031837915 AND conf: 1.0
9: supp: 0.01447178002894356 AND conf: 1.0
10: supp: 0.010130246020260492 AND conf: 1.0
11: supp: 0.056439942112879886 AND conf: 0.9750000000000001
12: supp: 0.04486251808972504 AND conf: 0.9687500000000001
13: supp: 0.07814761215629522 AND conf: 0.9642857142857142
14: supp: 0.1548480463096961 AND conf: 0.9639639639639639
15: supp: 0.1649782923299566 AND conf: 0.957983193277311
16: supp: 0.11577424023154848 AND conf: 0.9523809523809523
17: supp: 0.07670043415340087 AND conf: 0.9464285714285715
18: supp: 0.04775687409551375 AND conf: 0.9428571428571428
19: supp: 0.023154848046309694 AND conf: 0.9411764705882352
20: supp: 0.20260492040520983 AND conf: 0.9395973154362416
21: supp: 0.11287988422575977 AND conf: 0.9285714285714286
22: supp: 0.0361794500723589 AND conf: 0.9259259259259259
23: supp: 0.08104196816208394 AND conf: 0.9180327868852459
24: supp: 0.22431259044862517 AND conf: 0.9171597633136094
25: supp: 0.015918958031837915 AND conf: 0.9166666666666665
26: supp: 0.059334298118668596 AND conf: 0.9111111111111112
27: supp: 0.027496382054992764 AND conf: 0.9047619047619047
28: supp: 0.15195369030390737 AND conf: 0.8974358974358974
29: supp: 0.0824891461649783 AND conf: 0.8906250000000001
30: supp: 0.1476121562952243 AND conf: 0.8869565217391304
31: supp: 0.15050651230101303 AND conf: 0.8813559322033899
32: supp: 0.191027496382055 AND conf: 0.88
33: supp: 0.2619392185238784 AND conf: 0.8786407766990291
34: supp: 0.21273516642547033 AND conf: 0.8596491228070176
35: supp: 0.04486251808972504 AND conf: 0.8378378378378378
36: supp: 0.37771345875542695 AND conf: 0.8130841121495327
37: supp: 0.2170767004341534 AND conf: 0.8064516129032259

	</example>

</method>