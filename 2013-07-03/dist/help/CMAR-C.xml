<method>

	<name>Classification Based on Multiple Class-Association Rules (CMAR)</name>

	<reference>
		<ref>W. Li, J. Han, J. Pei: "CMAR: Accurate and efficient classification based on multiple class-association rules". In ICDM'01 (San Jose, CA, 2001) 369-376. </ref>
	</reference>

	<generalDescription>  

		<type>Classification model by association rules.</type>

		<objective>The CMAR method is an upgrade of FP-Growth as an efficient frequent pattern mining method which improve the previous one by efficiently mining larger databases and storing, retrieving and pruning rules in an more effective way.</objective>

		<howWork>
			The CMAR method extends an efficient frequent pattern mining method, FP-Growth, constructs a class distribution-associated FP-tree, and mines large database efficiently.
			Moreover, it applies a CR-tree structure to store and retrieve mined association rules efficiently, and prunes rules effectively based on confidence, correlation (by using a weighted Chi-Square method) and database coverage.
			CMAR consists of two phases:
			1.- Rule Generation
				In this first step, the algorithm computes the complete set of rules in the form of R: P --> c, where P is a pattern in the training dataset, and c is a class label such that sup(R) and conf(R) pass the given support and confidence thresholds, respectively.
				Furthermore, CMAR prunes some rules and only selects a subset of high quality rules for classification.
				1.1.- Mining Class-Association Rules Passing Support and Confidence Thresholds
					To find rules for classification, CMAR first mines the training data set to find the complete set of rules passing certain support and confidence thresholds.
					This is a typical frequent pattern or association rule mining task. To make mining highly scalable and efficient, CMAR adopts a variant of FP-growth method.
					FP-growth is a frequent pattern mining algorithm which is faster than conventional Apriori-like methods, especially in the situations where there exists large datasets, low support threshold, and/or long patterns.
					
				1.2.- Storing Rules
					Generated rules are stored in a CR-tree, a new prefix tree structure which is very useful to easily prune, store and retrieve rules.
					
				1.3.- Pruning Rules
					The number of rules generated by class-association rule mining can be huge. To make the classification effective and also efficient, we need to prune rules to delete redundant and noisy information.
					CMAR employs the following methods for rule pruning:
						- First, using general and high-confidence rule to prune more specific and lower confidence ones.
						- Second, selecting only positively correlated rules. For each rule, we test whether P is positively correlated by "Chi-Square" testing.
						- Third, pruning rules based on database coverage. CMAR selects a subset of high quality rules for classification. That is achieved by pruning rules based on database coverage using a coverage threshold.
							The employed method is similar to the one used on CBA; the major difference is that, instead of removing one data object form the training dataset immediately after it is covered, we let it stay there until it is covered by at least "delta" rules.
				
			2.- Classification Based on Multiple Rules
				In this second part, for a given data object CMAR extracts a subset of rules matching the object and predicts the class label of the object by analyzing this subset of rules.
				Those rules are chosen by using the pre-built CR-tree.
				
			SPECIAL ACKNOWLEDGMENTS:
			We must to (and of course, we want to) give special thanks to PhD. Mr. Frans Coenen, KDD and Datamining expert and teacher at University of Liverpool.
			Without the help obtained from his CMAR implementation, we couldn't be able to develop the method and adapt it to KEEL.
		</howWork>

		<parameterSpec>  
			<param>MinSupport = Is the threshold for the support value to create the items.</param>
			<param>MinConfidence = Is the threshold for the confidence value to create the rules.</param>
			<param>Database Coverage Threshold (delta) = Parameter to establish the number of times a database example must be covered to consider it correctly covered and take it out of the database in the coverage process.</param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>No</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>

	</generalDescription>

	<example>
	Problem type: Associative Classification 
	Method: CMAR
	Dataset: pima
	Training set: pima-10-1tra.dat
	Test set: pima-10-1tst.dat
	Test Show results: Vis-Clas-Check
	Parameters: 
		default values

After the execution of RunKeel.jar we can see into the experiment\results\Vis-Clas-Check folder the classification results for the test and train set:
TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=0.7142857142857143 N/C=0.0 
Fold 1 : CORRECT=0.7922077922077921 N/C=0.0 
Fold 2 : CORRECT=0.7922077922077921 N/C=0.0 
Fold 3 : CORRECT=0.7012987012987013 N/C=0.0 
Fold 4 : CORRECT=0.7272727272727273 N/C=0.0 
Fold 5 : CORRECT=0.7662337662337663 N/C=0.0 
Fold 6 : CORRECT=0.7922077922077921 N/C=0.0 
Fold 7 : CORRECT=0.8441558441558441 N/C=0.0 
Fold 8 : CORRECT=0.7763157894736842 N/C=0.0 
Fold 9 : CORRECT=0.7105263157894737 N/C=0.0 
Global Classification Error + N/C:
0.23832877648667122 
stddev Global Classification Error + N/C:
0.04418792242987905 
Correctly classified:
0.7616712235133287 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.8002894356005789 N/C=0.0 
Fold 1 : CORRECT=0.7930535455861071 N/C=0.0 
Fold 2 : CORRECT=0.7785817655571635 N/C=0.0 
Fold 3 : CORRECT=0.7930535455861071 N/C=0.0 
Fold 4 : CORRECT=0.8060781476121563 N/C=0.0 
Fold 5 : CORRECT=0.7858176555716353 N/C=0.0 
Fold 6 : CORRECT=0.7945007235890015 N/C=0.0 
Fold 7 : CORRECT=0.7988422575976846 N/C=0.0 
Fold 8 : CORRECT=0.7875722543352601 N/C=0.0 
Fold 9 : CORRECT=0.7991329479768786 N/C=0.0 
Global Classification Error + N/C:
0.20630777209874268 
stddev Global Classification Error + N/C:
0.007630969341309757 
Correctly classified:
0.7936922279012573 
Global N/C:
0.0 

We can also see the output and target classes for each case of the test set (result0.tst) in Experiment\Results\Clas-CMAR:

@relation   .a/pima/pima
@attribute 'preg'{0,1}
@attribute 'plas'{0,1,2,3}
@attribute 'pres'{0}
@attribute 'skin'{0}
@attribute 'insu'{0,1,2}
@attribute 'mass'{0,1}
@attribute 'pedi'{0}
@attribute 'age'{0,1}
@attribute 'class'{tested_negative,tested_positive}
@inputs 'preg','plas','pres','skin','insu','mass','pedi','age'
@outputs 'class'
@data
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative

@Number of rules: 159 Number of Antecedents by rule: 3.150943396226415

(1)  {1 3 10}  ->  {14} 
 Conf: 100.0%, (SuppRule: 69.0, SuppAnt: 69.0, SuppCons: 450.0)

(2)  {3 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 57.0, SuppAnt: 57.0, SuppCons: 450.0)

(3)  {1 3 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 57.0, SuppAnt: 57.0, SuppCons: 450.0)

(4)  {3 7 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 45.0, SuppAnt: 45.0, SuppCons: 450.0)

(5)  {1 3 7 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 45.0, SuppAnt: 45.0, SuppCons: 450.0)

(6)  {3 7 10}  ->  {14} 
 Conf: 100.0%, (SuppRule: 40.0, SuppAnt: 40.0, SuppCons: 450.0)

(7)  {1 3 7 10}  ->  {14} 
 Conf: 100.0%, (SuppRule: 35.0, SuppAnt: 35.0, SuppCons: 450.0)

(8)  {3 8 10}  ->  {14} 
 Conf: 100.0%, (SuppRule: 34.0, SuppAnt: 34.0, SuppCons: 450.0)

(9)  {1 3 8 10}  ->  {14} 
 Conf: 100.0%, (SuppRule: 34.0, SuppAnt: 34.0, SuppCons: 450.0)

(10)  {4 9 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 27.0, SuppAnt: 27.0, SuppCons: 450.0)

(11)  {1 4 9 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 27.0, SuppAnt: 27.0, SuppCons: 450.0)

(12)  {4 7 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 21.0, SuppAnt: 21.0, SuppCons: 450.0)

(13)  {4 9 11 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 21.0, SuppAnt: 21.0, SuppCons: 450.0)

(14)  {1 4 9 11 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 21.0, SuppAnt: 21.0, SuppCons: 450.0)

(15)  {1 4 7 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 20.0, SuppAnt: 20.0, SuppCons: 450.0)

(16)  {3 7 11 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 17.0, SuppAnt: 17.0, SuppCons: 450.0)

(17)  {1 3 7 11 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 17.0, SuppAnt: 17.0, SuppCons: 450.0)

(18)  {9 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 15.0, SuppAnt: 15.0, SuppCons: 450.0)

(19)  {1 9 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 15.0, SuppAnt: 15.0, SuppCons: 450.0)

(20)  {1 3 8 13}  ->  {14} 
 Conf: 100.0%, (SuppRule: 14.0, SuppAnt: 14.0, SuppCons: 450.0)

(21)  {1 3 10 13}  ->  {14} 
 Conf: 100.0%, (SuppRule: 12.0, SuppAnt: 12.0, SuppCons: 450.0)

(22)  {3 7 10 13}  ->  {14} 
 Conf: 100.0%, (SuppRule: 12.0, SuppAnt: 12.0, SuppCons: 450.0)

(23)  {2 6 9}  ->  {15} 
 Conf: 100.0%, (SuppRule: 11.0, SuppAnt: 11.0, SuppCons: 241.0)

(24)  {2 6 9 13}  ->  {15} 
 Conf: 100.0%, (SuppRule: 11.0, SuppAnt: 11.0, SuppCons: 241.0)

(25)  {2 6 9 11}  ->  {15} 
 Conf: 100.0%, (SuppRule: 10.0, SuppAnt: 10.0, SuppCons: 241.0)

(26)  {6 9 11 12}  ->  {15} 
 Conf: 100.0%, (SuppRule: 10.0, SuppAnt: 10.0, SuppCons: 241.0)

(27)  {1 6 9 11 12}  ->  {15} 
 Conf: 100.0%, (SuppRule: 10.0, SuppAnt: 10.0, SuppCons: 241.0)

(28)  {2 6 9 11 13}  ->  {15} 
 Conf: 100.0%, (SuppRule: 10.0, SuppAnt: 10.0, SuppCons: 241.0)

(29)  {1 3 8 11 13}  ->  {14} 
 Conf: 100.0%, (SuppRule: 9.0, SuppAnt: 9.0, SuppCons: 450.0)

(30)  {5 9 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 8.0, SuppAnt: 8.0, SuppCons: 450.0)

(31)  {1 5 9 10 12}  ->  {14} 
 Conf: 100.0%, (SuppRule: 8.0, SuppAnt: 8.0, SuppCons: 450.0)

(32)  {1 8 10 13}  ->  {14} 
 Conf: 100.0%, (SuppRule: 7.0, SuppAnt: 7.0, SuppCons: 450.0)

(33)  {3 10}  ->  {14} 
 Conf: 98.66%, (SuppRule: 74.0, SuppAnt: 75.0, SuppCons: 450.0)

(34)  {4 10 12}  ->  {14} 
 Conf: 97.5%, (SuppRule: 39.0, SuppAnt: 40.0, SuppCons: 450.0)

(35)  {1 4 10 12}  ->  {14} 
 Conf: 97.43%, (SuppRule: 38.0, SuppAnt: 39.0, SuppCons: 450.0)

(36)  {1 4 7 10}  ->  {14} 
 Conf: 96.87%, (SuppRule: 31.0, SuppAnt: 32.0, SuppCons: 450.0)

(37)  {7 10 12}  ->  {14} 
 Conf: 96.42%, (SuppRule: 54.0, SuppAnt: 56.0, SuppCons: 450.0)

(38)  {3 12}  ->  {14} 
 Conf: 96.39%, (SuppRule: 107.0, SuppAnt: 111.0, SuppCons: 450.0)

(39)  {1 3 12}  ->  {14} 
 Conf: 96.39%, (SuppRule: 107.0, SuppAnt: 111.0, SuppCons: 450.0)

(40)  {1 7 10 12}  ->  {14} 
 Conf: 96.36%, (SuppRule: 53.0, SuppAnt: 55.0, SuppCons: 450.0)

(41)  {1 3 8}  ->  {14} 
 Conf: 96.1%, (SuppRule: 74.0, SuppAnt: 77.0, SuppCons: 450.0)

(42)  {10 12}  ->  {14} 
 Conf: 95.79%, (SuppRule: 114.0, SuppAnt: 119.0, SuppCons: 450.0)

(43)  {1 10 12}  ->  {14} 
 Conf: 95.76%, (SuppRule: 113.0, SuppAnt: 118.0, SuppCons: 450.0)

(44)  {3 8}  ->  {14} 
 Conf: 95.23%, (SuppRule: 80.0, SuppAnt: 84.0, SuppCons: 450.0)

(45)  {3 8 12}  ->  {14} 
 Conf: 95.23%, (SuppRule: 60.0, SuppAnt: 63.0, SuppCons: 450.0)

(46)  {3 8 13}  ->  {14} 
 Conf: 95.23%, (SuppRule: 20.0, SuppAnt: 21.0, SuppCons: 450.0)

(47)  {1 4 10}  ->  {14} 
 Conf: 94.64%, (SuppRule: 53.0, SuppAnt: 56.0, SuppCons: 450.0)

(48)  {1 8 10}  ->  {14} 
 Conf: 94.54%, (SuppRule: 52.0, SuppAnt: 55.0, SuppCons: 450.0)

(49)  {3 10 13}  ->  {14} 
 Conf: 94.44%, (SuppRule: 17.0, SuppAnt: 18.0, SuppCons: 450.0)

(50)  {6 9 11}  ->  {15} 
 Conf: 94.28%, (SuppRule: 33.0, SuppAnt: 35.0, SuppCons: 241.0)

(51)  {6 11 12}  ->  {15} 
 Conf: 94.11%, (SuppRule: 16.0, SuppAnt: 17.0, SuppCons: 241.0)

(52)  {1 6 11 12}  ->  {15} 
 Conf: 94.11%, (SuppRule: 16.0, SuppAnt: 17.0, SuppCons: 241.0)

(53)  {1 3}  ->  {14} 
 Conf: 93.95%, (SuppRule: 140.0, SuppAnt: 149.0, SuppCons: 450.0)

(54)  {1 3 7}  ->  {14} 
 Conf: 93.93%, (SuppRule: 62.0, SuppAnt: 66.0, SuppCons: 450.0)

(55)  {8 10 12}  ->  {14} 
 Conf: 93.75%, (SuppRule: 45.0, SuppAnt: 48.0, SuppCons: 450.0)

(56)  {1 8 10 12}  ->  {14} 
 Conf: 93.75%, (SuppRule: 45.0, SuppAnt: 48.0, SuppCons: 450.0)

(57)  {3 8 11 13}  ->  {14} 
 Conf: 93.75%, (SuppRule: 15.0, SuppAnt: 16.0, SuppCons: 450.0)

(58)  {1 4 8 10}  ->  {14} 
 Conf: 93.33%, (SuppRule: 14.0, SuppAnt: 15.0, SuppCons: 450.0)

(59)  {3 7}  ->  {14} 
 Conf: 92.85%, (SuppRule: 78.0, SuppAnt: 84.0, SuppCons: 450.0)

(60)  {3 11 12}  ->  {14} 
 Conf: 92.59%, (SuppRule: 50.0, SuppAnt: 54.0, SuppCons: 450.0)

(61)  {1 3 11 12}  ->  {14} 
 Conf: 92.59%, (SuppRule: 50.0, SuppAnt: 54.0, SuppCons: 450.0)

(62)  {6 9 13}  ->  {15} 
 Conf: 92.59%, (SuppRule: 25.0, SuppAnt: 27.0, SuppCons: 241.0)

(63)  {3}  ->  {14} 
 Conf: 92.57%, (SuppRule: 162.0, SuppAnt: 175.0, SuppCons: 450.0)

(64)  {6 9}  ->  {15} 
 Conf: 92.1%, (SuppRule: 35.0, SuppAnt: 38.0, SuppCons: 241.0)

(65)  {3 8 11}  ->  {14} 
 Conf: 92.0%, (SuppRule: 46.0, SuppAnt: 50.0, SuppCons: 450.0)

(66)  {1 6 9 11}  ->  {15} 
 Conf: 92.0%, (SuppRule: 23.0, SuppAnt: 25.0, SuppCons: 241.0)

(67)  {6 9 11 13}  ->  {15} 
 Conf: 92.0%, (SuppRule: 23.0, SuppAnt: 25.0, SuppCons: 241.0)

(68)  {8 10}  ->  {14} 
 Conf: 91.8%, (SuppRule: 56.0, SuppAnt: 61.0, SuppCons: 450.0)

(69)  {1 10}  ->  {14} 
 Conf: 91.71%, (SuppRule: 155.0, SuppAnt: 169.0, SuppCons: 450.0)

(70)  {4 8 11 13}  ->  {14} 
 Conf: 91.66%, (SuppRule: 11.0, SuppAnt: 12.0, SuppCons: 450.0)

(71)  {1 4 7 10 13}  ->  {14} 
 Conf: 91.66%, (SuppRule: 11.0, SuppAnt: 12.0, SuppCons: 450.0)

(72)  {1 7 10}  ->  {14} 
 Conf: 91.3%, (SuppRule: 84.0, SuppAnt: 92.0, SuppCons: 450.0)

(73)  {4 7 10}  ->  {14} 
 Conf: 91.11%, (SuppRule: 41.0, SuppAnt: 45.0, SuppCons: 450.0)

(74)  {1 5 9 10}  ->  {14} 
 Conf: 90.9%, (SuppRule: 10.0, SuppAnt: 11.0, SuppCons: 450.0)

(75)  {1 4 8 13}  ->  {14} 
 Conf: 90.9%, (SuppRule: 10.0, SuppAnt: 11.0, SuppCons: 450.0)

(76)  {2 6 11}  ->  {15} 
 Conf: 90.47%, (SuppRule: 19.0, SuppAnt: 21.0, SuppCons: 241.0)

(77)  {2 6 11 13}  ->  {15} 
 Conf: 90.47%, (SuppRule: 19.0, SuppAnt: 21.0, SuppCons: 241.0)

(78)  {4 10}  ->  {14} 
 Conf: 90.27%, (SuppRule: 65.0, SuppAnt: 72.0, SuppCons: 450.0)

(79)  {8 12}  ->  {14} 
 Conf: 89.74%, (SuppRule: 105.0, SuppAnt: 117.0, SuppCons: 450.0)

(80)  {1 8 12}  ->  {14} 
 Conf: 89.74%, (SuppRule: 105.0, SuppAnt: 117.0, SuppCons: 450.0)

(81)  {6 11}  ->  {15} 
 Conf: 89.06%, (SuppRule: 57.0, SuppAnt: 64.0, SuppCons: 241.0)

(82)  {1 6 9}  ->  {15} 
 Conf: 88.88%, (SuppRule: 24.0, SuppAnt: 27.0, SuppCons: 241.0)

(83)  {2 3 7}  ->  {14} 
 Conf: 88.88%, (SuppRule: 16.0, SuppAnt: 18.0, SuppCons: 450.0)

(84)  {4 8 10}  ->  {14} 
 Conf: 88.88%, (SuppRule: 16.0, SuppAnt: 18.0, SuppCons: 450.0)

(85)  {2 3 7 13}  ->  {14} 
 Conf: 88.88%, (SuppRule: 16.0, SuppAnt: 18.0, SuppCons: 450.0)

(86)  {4 9 10}  ->  {14} 
 Conf: 88.88%, (SuppRule: 8.0, SuppAnt: 9.0, SuppCons: 450.0)

(87)  {1 4 9 10}  ->  {14} 
 Conf: 88.88%, (SuppRule: 8.0, SuppAnt: 9.0, SuppCons: 450.0)

(88)  {1 4 8 11 13}  ->  {14} 
 Conf: 88.88%, (SuppRule: 8.0, SuppAnt: 9.0, SuppCons: 450.0)

(89)  {1 3 11}  ->  {14} 
 Conf: 88.75%, (SuppRule: 71.0, SuppAnt: 80.0, SuppCons: 450.0)

(90)  {1 4 12}  ->  {14} 
 Conf: 88.69%, (SuppRule: 102.0, SuppAnt: 115.0, SuppCons: 450.0)

(91)  {1 6 11}  ->  {15} 
 Conf: 88.37%, (SuppRule: 38.0, SuppAnt: 43.0, SuppCons: 241.0)

(92)  {4 8 13}  ->  {14} 
 Conf: 88.23%, (SuppRule: 15.0, SuppAnt: 17.0, SuppCons: 450.0)

(93)  {7 10}  ->  {14} 
 Conf: 88.13%, (SuppRule: 104.0, SuppAnt: 118.0, SuppCons: 450.0)

(94)  {4 12}  ->  {14} 
 Conf: 88.03%, (SuppRule: 103.0, SuppAnt: 117.0, SuppCons: 450.0)

(95)  {1 8}  ->  {14} 
 Conf: 88.0%, (SuppRule: 132.0, SuppAnt: 150.0, SuppCons: 450.0)

(96)  {3 11}  ->  {14} 
 Conf: 88.0%, (SuppRule: 88.0, SuppAnt: 100.0, SuppCons: 450.0)

(97)  {10}  ->  {14} 
 Conf: 87.86%, (SuppRule: 181.0, SuppAnt: 206.0, SuppCons: 450.0)

(98)  {2 6}  ->  {15} 
 Conf: 87.5%, (SuppRule: 21.0, SuppAnt: 24.0, SuppCons: 241.0)

(99)  {2 6 13}  ->  {15} 
 Conf: 87.5%, (SuppRule: 21.0, SuppAnt: 24.0, SuppCons: 241.0)

(100)  {6 11 13}  ->  {15} 
 Conf: 87.23%, (SuppRule: 41.0, SuppAnt: 47.0, SuppCons: 241.0)

(101)  {8 11 12}  ->  {14} 
 Conf: 86.95%, (SuppRule: 60.0, SuppAnt: 69.0, SuppCons: 450.0)

(102)  {1 8 11 12}  ->  {14} 
 Conf: 86.95%, (SuppRule: 60.0, SuppAnt: 69.0, SuppCons: 450.0)

(103)  {4 8}  ->  {14} 
 Conf: 86.88%, (SuppRule: 53.0, SuppAnt: 61.0, SuppCons: 450.0)

(104)  {1 3 13}  ->  {14} 
 Conf: 86.84%, (SuppRule: 33.0, SuppAnt: 38.0, SuppCons: 450.0)

(105)  {1 6 7 11}  ->  {15} 
 Conf: 86.66%, (SuppRule: 13.0, SuppAnt: 15.0, SuppCons: 241.0)

(106)  {6 13}  ->  {15} 
 Conf: 86.53%, (SuppRule: 45.0, SuppAnt: 52.0, SuppCons: 241.0)

(107)  {1 9 10}  ->  {14} 
 Conf: 86.36%, (SuppRule: 19.0, SuppAnt: 22.0, SuppCons: 450.0)

(108)  {4 8 11}  ->  {14} 
 Conf: 86.04%, (SuppRule: 37.0, SuppAnt: 43.0, SuppCons: 450.0)

(109)  {8}  ->  {14} 
 Conf: 85.96%, (SuppRule: 147.0, SuppAnt: 171.0, SuppCons: 450.0)

(110)  {3 13}  ->  {14} 
 Conf: 85.93%, (SuppRule: 55.0, SuppAnt: 64.0, SuppCons: 450.0)

(111)  {5 9 10}  ->  {14} 
 Conf: 85.71%, (SuppRule: 12.0, SuppAnt: 14.0, SuppCons: 450.0)

(112)  {8 10 13}  ->  {14} 
 Conf: 84.61%, (SuppRule: 11.0, SuppAnt: 13.0, SuppCons: 450.0)

(113)  {1 8 11}  ->  {14} 
 Conf: 84.21%, (SuppRule: 80.0, SuppAnt: 95.0, SuppCons: 450.0)

(114)  {1 4 11 12}  ->  {14} 
 Conf: 84.21%, (SuppRule: 64.0, SuppAnt: 76.0, SuppCons: 450.0)

(115)  {1 4 7 12}  ->  {14} 
 Conf: 84.09%, (SuppRule: 37.0, SuppAnt: 44.0, SuppCons: 450.0)

(116)  {2 9 11}  ->  {15} 
 Conf: 83.78%, (SuppRule: 31.0, SuppAnt: 37.0, SuppCons: 241.0)

(117)  {1 7 10 13}  ->  {14} 
 Conf: 83.78%, (SuppRule: 31.0, SuppAnt: 37.0, SuppCons: 450.0)

(118)  {2 9 11 13}  ->  {15} 
 Conf: 83.78%, (SuppRule: 31.0, SuppAnt: 37.0, SuppCons: 241.0)

(119)  {4 7 10 13}  ->  {14} 
 Conf: 83.33%, (SuppRule: 20.0, SuppAnt: 24.0, SuppCons: 450.0)

(120)  {4 11 12}  ->  {14} 
 Conf: 83.11%, (SuppRule: 64.0, SuppAnt: 77.0, SuppCons: 450.0)

(121)  {8 11}  ->  {14} 
 Conf: 82.72%, (SuppRule: 91.0, SuppAnt: 110.0, SuppCons: 450.0)

(122)  {4 7 12}  ->  {14} 
 Conf: 82.6%, (SuppRule: 38.0, SuppAnt: 46.0, SuppCons: 450.0)

(123)  {1 8 13}  ->  {14} 
 Conf: 81.81%, (SuppRule: 27.0, SuppAnt: 33.0, SuppCons: 450.0)

(124)  {1 12}  ->  {14} 
 Conf: 81.3%, (SuppRule: 261.0, SuppAnt: 321.0, SuppCons: 450.0)

(125)  {12}  ->  {14} 
 Conf: 81.11%, (SuppRule: 262.0, SuppAnt: 323.0, SuppCons: 450.0)

(126)  {2 9}  ->  {15} 
 Conf: 80.95%, (SuppRule: 34.0, SuppAnt: 42.0, SuppCons: 241.0)

(127)  {2 9 13}  ->  {15} 
 Conf: 80.95%, (SuppRule: 34.0, SuppAnt: 42.0, SuppCons: 241.0)

(128)  {1 4}  ->  {14} 
 Conf: 80.64%, (SuppRule: 150.0, SuppAnt: 186.0, SuppCons: 450.0)

(129)  {7 10 13}  ->  {14} 
 Conf: 80.64%, (SuppRule: 50.0, SuppAnt: 62.0, SuppCons: 450.0)

(130)  {2 5 7 11}  ->  {15} 
 Conf: 78.94%, (SuppRule: 15.0, SuppAnt: 19.0, SuppCons: 241.0)

(131)  {2 5 7 11 13}  ->  {15} 
 Conf: 78.94%, (SuppRule: 15.0, SuppAnt: 19.0, SuppCons: 241.0)

(132)  {2 5 9 11}  ->  {15} 
 Conf: 78.26%, (SuppRule: 18.0, SuppAnt: 23.0, SuppCons: 241.0)

(133)  {1 7 12}  ->  {14} 
 Conf: 78.22%, (SuppRule: 97.0, SuppAnt: 124.0, SuppCons: 450.0)

(134)  {1 4 7}  ->  {14} 
 Conf: 78.16%, (SuppRule: 68.0, SuppAnt: 87.0, SuppCons: 450.0)

(135)  {7 12}  ->  {14} 
 Conf: 77.77%, (SuppRule: 98.0, SuppAnt: 126.0, SuppCons: 450.0)

(136)  {8 13}  ->  {14} 
 Conf: 77.77%, (SuppRule: 42.0, SuppAnt: 54.0, SuppCons: 450.0)

(137)  {9 10}  ->  {14} 
 Conf: 77.77%, (SuppRule: 21.0, SuppAnt: 27.0, SuppCons: 450.0)

(138)  {1 4 9}  ->  {14} 
 Conf: 77.27%, (SuppRule: 34.0, SuppAnt: 44.0, SuppCons: 450.0)

(139)  {10 13}  ->  {14} 
 Conf: 77.01%, (SuppRule: 67.0, SuppAnt: 87.0, SuppCons: 450.0)

(140)  {2 7 10}  ->  {14} 
 Conf: 76.92%, (SuppRule: 20.0, SuppAnt: 26.0, SuppCons: 450.0)

(141)  {2 5 11}  ->  {15} 
 Conf: 76.59%, (SuppRule: 36.0, SuppAnt: 47.0, SuppCons: 241.0)

(142)  {2 5 11 13}  ->  {15} 
 Conf: 76.59%, (SuppRule: 36.0, SuppAnt: 47.0, SuppCons: 241.0)

(143)  {1 4 11}  ->  {14} 
 Conf: 74.61%, (SuppRule: 97.0, SuppAnt: 130.0, SuppCons: 450.0)

(144)  {4}  ->  {14} 
 Conf: 74.45%, (SuppRule: 172.0, SuppAnt: 231.0, SuppCons: 450.0)

(145)  {9 12}  ->  {14} 
 Conf: 73.75%, (SuppRule: 59.0, SuppAnt: 80.0, SuppCons: 450.0)

(146)  {1 9 12}  ->  {14} 
 Conf: 73.75%, (SuppRule: 59.0, SuppAnt: 80.0, SuppCons: 450.0)

(147)  {1 11 12}  ->  {14} 
 Conf: 72.9%, (SuppRule: 148.0, SuppAnt: 203.0, SuppCons: 450.0)

(148)  {9 11 13}  ->  {15} 
 Conf: 72.82%, (SuppRule: 67.0, SuppAnt: 92.0, SuppCons: 241.0)

(149)  {2 4 7 11}  ->  {15} 
 Conf: 72.72%, (SuppRule: 16.0, SuppAnt: 22.0, SuppCons: 241.0)

(150)  {1}  ->  {14} 
 Conf: 71.5%, (SuppRule: 384.0, SuppAnt: 537.0, SuppCons: 450.0)

(151)  {2 4 7 11 13}  ->  {15} 
 Conf: 71.42%, (SuppRule: 15.0, SuppAnt: 21.0, SuppCons: 241.0)

(152)  {5 7 11 13}  ->  {15} 
 Conf: 70.83%, (SuppRule: 34.0, SuppAnt: 48.0, SuppCons: 241.0)

(153)  {9 13}  ->  {15} 
 Conf: 70.19%, (SuppRule: 73.0, SuppAnt: 104.0, SuppCons: 241.0)

(154)  {1 7}  ->  {14} 
 Conf: 69.38%, (SuppRule: 170.0, SuppAnt: 245.0, SuppCons: 450.0)

(155)  {5 11 13}  ->  {15} 
 Conf: 67.92%, (SuppRule: 72.0, SuppAnt: 106.0, SuppCons: 241.0)

(156)  {5 9 11 13}  ->  {15} 
 Conf: 67.39%, (SuppRule: 31.0, SuppAnt: 46.0, SuppCons: 241.0)

(157)  {5 7 11}  ->  {15} 
 Conf: 66.19%, (SuppRule: 47.0, SuppAnt: 71.0, SuppCons: 241.0)

(158)  {2 11}  ->  {15} 
 Conf: 65.81%, (SuppRule: 77.0, SuppAnt: 117.0, SuppCons: 241.0)

(159)  {2 11 13}  ->  {15} 
 Conf: 65.51%, (SuppRule: 76.0, SuppAnt: 116.0, SuppCons: 241.0)

	</example>

</method>