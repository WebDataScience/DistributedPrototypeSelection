<method>

	<name>Distribution-Index-Based Discretizer</name>

	<reference>  

		<ref>QingXiang Wu, David A. Bell, Girijesh Prasad, Thomas Martin McGinnity, "A Distribution-Index-Based Discretizer for Decision-Making with Symbolic AI Approaches," IEEE Transactions on Knowledge and Data Engineering, pp. 17-28, January, 2007</ref>

	</reference>

	<generalDescription>  

		<type>Discretization of real attributes</type>

		<objective>To transform a set of numerical variables into nominal variables. Input variables may be either real or integer.</objective>

		<howWork>
			
			This algorithm, from now known as DIBD, has the next features:
			
			
			- supervised, because it uses the decision attribute information.
			- static, because discretization is completed prior to the learning task.
			- local, because it discretizes only one attribute at same time.
			- top-down, because its starts with a empty list of cutpoints and adds cutpoints at each step.
			- incremental, because it begins with a simple discretization scheme and it passes through a refinement process. Also, it requires a stopping criterion to finish and it determines the number of intervals dynamically.
			
			The DIBD takes account of the natural distribution of data values and it is based on definitions of dichotomic entropy and a compound distributional index. The dichotomic entropy indicates the homogeneity degree of the decision value distribution, and it is applied to determine the best splitting point. The compound distributional index combines both the homogeneity degrees of attribute value distributions and the decision value distribution, and is applied to determine if it accepts the new cutpoint. The compound distributional index for an interval always decreases when a large interval is split into two small intervals. Based on this approach, a value area with high occurrence and high homogeneity degree is split into small intervals; otherwise it is split into large intervals.
			
			The DIBD first form a set with the possible cutpoints with the different values of the attribute to discretize. Then, for each these values, it calculates the distribution numbers: the number of examples that take each value and the number of examples that take each value per class. It starts with the discretization scheme D = [valueMin,valueMax].
			
			Then iteratively, for each cutpoint not present in D, it computes the entropy for this cutpoint into his littlest interval and it selects the cutpoint with minimal entropy. At last, it decides if the new cutpoint enters into the discretization scheme computing the compound distributional index and the compound decrement for the cutpoint of minimal entropy. If it decides that the cutpoint do not enters in D, the algorithm stops and it returns the discretization scheme D. Otherwise, it adds the cutpoint to D and it starts a new iteration.

		</howWork>

		<parameterSpec>  

			<param> numIntrvls: maximal number of intervals in order to discretize each continuous attribute.</param>

		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>No</nominal>

			<valueLess>Yes</valueLess>

			<impreciseValue>Yes</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Classification 
Method: Distribution-Index-Based Discretizer
Dataset: Iris Plants

Input Training set: Iris-5x2-1tra.dat
Input Test set: Iris-5x2-1tst.dat
Output Training set: result0.tra
Output Test set: result0.tst
Descriptor: result0e0.txt

Parameters: default values

After the execution of RunKeel.jar we can see into the experiment/results/Disc-DIBD/iris folder the discretization results; 3 files are generated in this folder:


File result0.tra:
	It contains the discretization result of training set.

@relation Iris_Plants_Database
@attribute sepalLength {0,1,2,3,4,5,6,7,8,9}
@attribute sepalWidth {0,1,2,3,4,5,6,7,8,9}
@attribute petalLength {0,1,2,3,4,5,6,7,8,9}
@attribute petalWidth {0,1,2,3,4,5,6,7,8,9}
@attribute class{Iris-setosa,Iris-versicolor,Iris-virginica}
@data
2,5,0,0,Iris-setosa
1,4,0,0,Iris-setosa
0,4,0,0,Iris-setosa
3,7,1,1,Iris-setosa
0,5,0,0,Iris-setosa
2,5,0,0,Iris-setosa
3,6,0,0,Iris-setosa
1,5,1,0,Iris-setosa
0,3,0,0,Iris-setosa
4,9,0,1,Iris-setosa
3,7,0,1,Iris-setosa
4,7,1,0,Iris-setosa
3,5,1,0,Iris-setosa
2,6,0,1,Iris-setosa
0,6,0,0,Iris-setosa
2,5,1,1,Iris-setosa
2,5,0,0,Iris-setosa
2,8,0,0,Iris-setosa
3,9,0,0,Iris-setosa
2,4,0,0,Iris-setosa
2,5,0,0,Iris-setosa
2,5,0,0,Iris-setosa
0,4,0,0,Iris-setosa
2,5,1,2,Iris-setosa
2,7,1,1,Iris-setosa
7,4,6,5,Iris-versicolor
7,4,6,5,Iris-versicolor
3,0,5,5,Iris-versicolor
4,2,6,5,Iris-versicolor
5,4,6,6,Iris-versicolor
1,0,4,3,Iris-versicolor
5,3,6,5,Iris-versicolor
7,4,5,5,Iris-versicolor
4,2,5,3,Iris-versicolor
5,0,6,5,Iris-versicolor
4,4,6,7,Iris-versicolor
5,2,5,5,Iris-versicolor
5,2,6,4,Iris-versicolor
6,3,5,5,Iris-versicolor
7,2,6,5,Iris-versicolor
3,3,6,5,Iris-versicolor
7,4,6,5,Iris-versicolor
5,0,5,5,Iris-versicolor
3,1,5,5,Iris-versicolor
4,1,5,4,Iris-versicolor
2,0,4,3,Iris-versicolor
4,3,5,5,Iris-versicolor
5,3,5,5,Iris-versicolor
2,1,3,4,Iris-versicolor
4,2,5,5,Iris-versicolor
5,4,8,9,Iris-virginica
4,2,7,7,Iris-virginica
8,3,8,8,Iris-virginica
6,3,8,8,Iris-virginica
9,3,9,8,Iris-virginica
8,3,9,7,Iris-virginica
6,4,7,7,Iris-virginica
4,2,7,9,Iris-virginica
5,0,7,5,Iris-virginica
9,2,9,7,Iris-virginica
7,4,8,8,Iris-virginica
8,4,8,7,Iris-virginica
5,2,6,7,Iris-virginica
6,2,8,8,Iris-virginica
5,1,8,5,Iris-virginica
9,3,8,9,Iris-virginica
5,3,6,7,Iris-virginica
7,4,7,8,Iris-virginica
7,4,8,9,Iris-virginica
7,4,8,9,Iris-virginica
7,3,7,9,Iris-virginica
5,1,7,7,Iris-virginica
6,3,7,7,Iris-virginica
5,5,7,9,Iris-virginica
4,3,7,7,Iris-virginica


File result0.tst:
	It contains the discretization result of testing set.

@relation Iris_Plants_Database
@attribute sepalLength {0,1,2,3,4,5,6,7,8,9}
@attribute sepalWidth {0,1,2,3,4,5,6,7,8,9}
@attribute petalLength {0,1,2,3,4,5,6,7,8,9}
@attribute petalWidth {0,1,2,3,4,5,6,7,8,9}
@attribute class{Iris-setosa,Iris-versicolor,Iris-virginica}
@data
1,3,0,0,Iris-setosa
2,6,0,0,Iris-setosa
0,3,0,0,Iris-setosa
1,4,0,0,Iris-setosa
1,3,0,0,Iris-setosa
4,8,0,0,Iris-setosa
2,5,0,0,Iris-setosa
2,7,0,0,Iris-setosa
2,4,1,1,Iris-setosa
1,5,1,0,Iris-setosa
2,3,1,0,Iris-setosa
2,5,0,0,Iris-setosa
1,4,1,0,Iris-setosa
1,4,1,0,Iris-setosa
3,5,0,1,Iris-setosa
1,4,0,0,Iris-setosa
3,5,0,0,Iris-setosa
1,4,0,0,Iris-setosa
0,3,0,0,Iris-setosa
0,0,0,0,Iris-setosa
1,3,0,0,Iris-setosa
2,7,1,0,Iris-setosa
0,4,0,0,Iris-setosa
2,6,0,0,Iris-setosa
2,4,0,0,Iris-setosa
6,4,6,5,Iris-versicolor
6,2,6,5,Iris-versicolor
6,3,6,5,Iris-versicolor
2,2,5,5,Iris-versicolor
2,0,4,3,Iris-versicolor
4,3,5,5,Iris-versicolor
5,0,5,3,Iris-versicolor
3,3,4,5,Iris-versicolor
3,3,6,5,Iris-versicolor
3,1,5,4,Iris-versicolor
5,1,6,5,Iris-versicolor
6,3,5,5,Iris-versicolor
7,3,7,6,Iris-versicolor
5,3,6,5,Iris-versicolor
4,1,4,3,Iris-versicolor
3,0,4,4,Iris-versicolor
3,0,4,3,Iris-versicolor
4,2,5,4,Iris-versicolor
5,2,7,6,Iris-versicolor
5,5,6,6,Iris-versicolor
3,3,5,5,Iris-versicolor
3,1,5,4,Iris-versicolor
5,3,6,5,Iris-versicolor
3,2,5,5,Iris-versicolor
4,3,5,4,Iris-versicolor
5,3,8,7,Iris-virginica
1,1,6,6,Iris-virginica
7,1,8,7,Iris-virginica
8,6,8,9,Iris-virginica
6,2,7,7,Iris-virginica
7,3,7,8,Iris-virginica
4,1,7,7,Iris-virginica
6,4,7,9,Iris-virginica
6,3,7,7,Iris-virginica
9,7,9,8,Iris-virginica
9,1,9,9,Iris-virginica
7,4,8,9,Iris-virginica
3,2,6,7,Iris-virginica
5,2,6,7,Iris-virginica
5,3,6,7,Iris-virginica
8,3,8,6,Iris-virginica
9,2,8,7,Iris-virginica
9,7,9,7,Iris-virginica
6,2,8,8,Iris-virginica
5,2,7,5,Iris-virginica
5,5,8,9,Iris-virginica
6,4,7,7,Iris-virginica
7,4,8,9,Iris-virginica
7,4,7,9,Iris-virginica
4,2,7,7,Iris-virginica


File result0e0.txt:
	It contains the descriptor of cutting points used in the discretization.

Cut point 0 of attribute 0 : 4.64
Cut point 1 of attribute 0 : 4.9799999999999995
Cut point 2 of attribute 0 : 5.319999999999999
Cut point 3 of attribute 0 : 5.659999999999999
Cut point 4 of attribute 0 : 5.999999999999999
Cut point 5 of attribute 0 : 6.339999999999999
Cut point 6 of attribute 0 : 6.679999999999999
Cut point 7 of attribute 0 : 7.019999999999999
Cut point 8 of attribute 0 : 7.3599999999999985
Number of cut points of attribute 0 : 9
Cut point 0 of attribute 1 : 2.4200000000000004
Cut point 1 of attribute 1 : 2.6400000000000006
Cut point 2 of attribute 1 : 2.8600000000000008
Cut point 3 of attribute 1 : 3.080000000000001
Cut point 4 of attribute 1 : 3.300000000000001
Cut point 5 of attribute 1 : 3.5200000000000014
Cut point 6 of attribute 1 : 3.7400000000000015
Cut point 7 of attribute 1 : 3.9600000000000017
Cut point 8 of attribute 1 : 4.1800000000000015
Number of cut points of attribute 1 : 9
Cut point 0 of attribute 2 : 1.57
Cut point 1 of attribute 2 : 2.14
Cut point 2 of attribute 2 : 2.71
Cut point 3 of attribute 2 : 3.2800000000000002
Cut point 4 of attribute 2 : 3.8500000000000005
Cut point 5 of attribute 2 : 4.420000000000001
Cut point 6 of attribute 2 : 4.990000000000001
Cut point 7 of attribute 2 : 5.560000000000001
Cut point 8 of attribute 2 : 6.130000000000002
Number of cut points of attribute 2 : 9
Cut point 0 of attribute 3 : 0.33999999999999997
Cut point 1 of attribute 3 : 0.58
Cut point 2 of attribute 3 : 0.82
Cut point 3 of attribute 3 : 1.06
Cut point 4 of attribute 3 : 1.3
Cut point 5 of attribute 3 : 1.54
Cut point 6 of attribute 3 : 1.78
Cut point 7 of attribute 3 : 2.02
Cut point 8 of attribute 3 : 2.26
Number of cut points of attribute 3 : 9

</example>

</method>