<method>

	<name>Decission Surface Mapping</name>

	<reference>
	  <ref>Geva, S., Site, J. Adaptive nearest neighbor pattern classifier (1991) IEEE Transactions on Neural Networks, 2:2, pp. 318‐322.</ref> 
  	<ref>Kohonen, T. Self-Organizing Maps Self-Organizing Maps New Springer Series in Information Sciences, Vol. 30, Springer, Berlin, Heidelberg, New York, 1995, 1997, 2001. Third Extended Edition, 501 pages. ISBN 3-540-67921-9, ISSN 0720-678X </ref>
		<ref>Kohonen, T. The self organizing map (1990) Proceeding of the IEEE, 78:9, pp. 1464‐1480.</ref>
	</reference>

	<generalDescription>  

		<type>Preprocess Method. Data Reduction. Prototype Generation. Noise Filter.</type>

		<objective>Reduce the size of the training set without losing precision or accuracy in order to a posterior classification</objective>

		<howWork>
		First, extract into resulting set a number of prototypes randomly of the set.
		Later, it executes a desired number of iterations.
		In each iteration, picks up a randomly prototype of the resulting set, and modifies its nearest neighbor into the resulting set, rewarding it if the nearest prototoype has not got the same class, and penalizing the prototype that is nearest but has got other class.
		Rewarding process: m_c = m_c + alpha * (x - m_c) (Same as LVQ1)
		Penalizing process: m_c = m_c - alpha * (x - m_c) (Same as LVQ1)
		</howWork>

		<parameterSpec>  
			<param>Number of iterations: Integer value. Number of iterations of the algorithm.</param>
			<param>Percentage of prototypes: Real value. Desired size of the resulting set as percentage of training set size.</param>
			<param>Alpha0: Double value. Alpha constant in [0, 1].</param>
		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>No</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Classification
Method: PG-DSM
Dataset: iris
Training set: iris-10-1tra.dat
Parameters: default values

We can see output set in Experiment\Results\PG-DSM:

@relation  iris_plants_database
@attribute sepalLength real[4.3,7.9]
@attribute sepalWidth real[2.0,4.4]
@attribute petalLength real[1.0,6.9]
@attribute petalWidth real[0.1,2.5]
@attribute class{Iris-setosa,Iris-versicolor,Iris-virginica}
@inputs sepalLength,sepalWidth,petalLength,petalWidth
@outputs class
5.1, 3.5, 1.4, 0.3, Iris-setosa
4.9, 3.1, 1.5, 0.1, Iris-setosa
4.4, 3.2, 1.3, 0.2, Iris-setosa
6.308170919143739, 2.7350897261486264, 4.723733702409732, 1.5115457950605133, Iris-versicolor
5.5, 2.4, 3.8, 1.1, Iris-versicolor
5.618777325399516, 2.6229848035109464, 4.420779559503547, 1.193610590789169, Iris-versicolor
5.898289497000296, 2.8042548608426205, 4.9660399280669125, 1.8178239547005592, Iris-virginica
6.9081826221002, 3.1040913110501003, 5.4266687642504, 2.1287294682604, Iris-virginica
6.3775142272412975, 2.7910514614838506, 5.5508813991589125, 2.081558663854463, Iris-virginica
7.3, 2.9, 6.3, 1.8, Iris-virginica

</example>

</method>
