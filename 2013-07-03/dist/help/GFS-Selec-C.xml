<method>

	<name>Grid Rule Base Generation and Genetic Rule Selection</name>

	<reference>  
<ref>H. Ishibuchi, K. Nozaki, N. Yamamoto, H. Tanaka. Selecting Fuzzy If-Then Rules for Classification
Problems Using Genetic Algorithms, IEEE Transactions on Fuzzy Systems 3:3 (1995) 260-270</ref> 
	</reference>

	<generalDescription>  

		<type>Evolutionary Fuzzy Rule Based Classification System</type>

		<objective>To obtain a Compact Fuzzy Rule Base that better suits the training data</objective>

		<howWork>The algorithm first creates a whole Rule Base including rules with fuzzy labels in 
		different partitions. Then a genetic process is run in order to select a subset of fuzzy rules to 
		obtain a compact rule base. The aim of the genetic algorithm is to optimize both the size of the
		Rule Set and the Accuracy in the training set. This model follows an elitist approach until a 
		prespecified number of generations.
		</howWork>

		<parameterSpec>  
			<param>Number of Maximum Fuzzy Partitions: Number of Fuzzy Partitions for constructing the initial
			Rule Base</param>
			<param>Weight for the Number of Classified Patterns: Fitness weight for the accuracy</param>
			<param>Weight for the Size of the Rule Set: Fitness weight for the interpretability</param>
			<param>Population Size: Number of individuals in the population</param>
			<param>Probability to include a rule in the initial population</param>
			<param>Mutation Probability</param>
			<param>Number of Total Generations</param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>No</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>

	</generalDescription>

	<example>Problem type: Classification 
Method: Clas-Fuzzy-Ishib-Selec
Dataset: iris
Training set: iris-10-1tra.dat
Test set: iris-10-1tst.dat
Test Show results: Vis-Clas-Check
Parameters: default values

After the execution of RunKeel.jar we can see into the experiment/results/Vis-Clas-Check/TSTClas-Fuzzy-Ish-Selec folder the classification results for the training and test sets:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=1.0 N/C=0.0 
...
Global Classification Error + N/C:
0.04666666666666666 
stddev Global Classification Error + N/C:
0.042687494916218996 
Correctly classified:
0.9533333333333334 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.962962962962963 N/C=0.0 
... 
Global Classification Error + N/C:
0.031851851851851846 
stddev Global Classification Error + N/C:
0.005785370130301236 
Correctly classified:
0.9681481481481482 
Global N/C:
0.0 


We can see also the Data Base and Rule Base generated in the files "result0e0.txt" and "result0e1.txt" 
respectively in the folder experiment/results/Clas-Fuzzy-Ish-Selec/iris/:

Particion[2]: 

Variable 1:
 Label 1: (0.6999999999999993,4.3,7.9)
 Label 2: (4.3,7.9,11.5)

Variable 2:
 Label 1: (-0.40000000000000036,2.0,4.4)
 Label 2: (2.0,4.4,6.800000000000001)

Variable 3:
 Label 1: (-4.9,1.0,6.9)
 Label 2: (1.0,6.9,12.8)

Variable 4:
 Label 1: (-2.3,0.1,2.5)
 Label 2: (0.1,2.5,4.8999999999999995)


Particion[3]: 

Variable 1:
 Label 1: (2.4999999999999996,4.3,6.1)
 Label 2: (4.3,6.1,7.9)
 Label 3: (6.1,7.9,9.7)

Variable 2:
 Label 1: (0.7999999999999998,2.0,3.2)
 Label 2: (2.0,3.2,4.4)
 Label 3: (3.2,4.4,5.6000000000000005)

Variable 3:
 Label 1: (-1.9500000000000002,1.0,3.95)
 Label 2: (1.0,3.95,6.9)
 Label 3: (3.95,6.9,9.850000000000001)

Variable 4:
 Label 1: (-1.0999999999999999,0.1,1.3)
 Label 2: (0.1,1.3,2.5)
 Label 3: (1.3,2.5,3.6999999999999997)


Particion[4]: 

Variable 1:
 Label 1: (3.0999999999999996,4.3,5.5)
 Label 2: (4.3,5.5,6.7)
 Label 3: (5.5,6.7,7.9)
 Label 4: (6.7,7.9,9.100000000000001)

Variable 2:
 Label 1: (1.1999999999999997,2.0,2.8000000000000003)
 Label 2: (2.0,2.8000000000000003,3.6000000000000005)
 Label 3: (2.8000000000000003,3.6000000000000005,4.4)
 Label 4: (3.6000000000000005,4.4,5.200000000000001)

Variable 3:
 Label 1: (-0.9666666666666668,1.0,2.966666666666667)
 Label 2: (1.0,2.966666666666667,4.933333333333334)
 Label 3: (2.966666666666667,4.933333333333334,6.9)
 Label 4: (4.933333333333334,6.9,8.866666666666667)

Variable 4:
 Label 1: (-0.7,0.1,0.8999999999999999)
 Label 2: (0.1,0.8999999999999999,1.7)
 Label 3: (0.8999999999999999,1.7,2.5)
 Label 4: (1.7,2.5,3.3)


Particion[5]: 

Variable 1:
 Label 1: (3.3999999999999995,4.3,5.2)
 Label 2: (4.3,5.2,6.1)
 Label 3: (5.2,6.1,7.0)
 Label 4: (6.1,7.0,7.9)
 Label 5: (7.0,7.9,8.8)

Variable 2:
 Label 1: (1.4,2.0,2.6)
 Label 2: (2.0,2.6,3.2)
 Label 3: (2.6,3.2,3.8000000000000003)
 Label 4: (3.2,3.8000000000000003,4.4)
 Label 5: (3.8000000000000003,4.4,5.0)

Variable 3:
 Label 1: (-0.4750000000000001,1.0,2.475)
 Label 2: (1.0,2.475,3.95)
 Label 3: (2.475,3.95,5.425000000000001)
 Label 4: (3.95,5.425000000000001,6.9)
 Label 5: (5.425000000000001,6.9,8.375)

Variable 4:
 Label 1: (-0.5,0.1,0.7)
 Label 2: (0.1,0.7,1.3)
 Label 3: (0.7,1.3,1.9)
 Label 4: (1.3,1.9,2.5)
 Label 5: (1.9,2.5,3.1)

Number of rules: 385

L0(2): 	0.6999999999999993	4.3	7.9
L0(2): 	-0.40000000000000036	2.0	4.4
L0(2): 	-4.9	1.0	6.9
L0(2): 	-2.3	0.1	2.5
Class: 0 with RW: 0.4554787110075773

...

L4(5): 	7.0	7.9	8.8
L3(5): 	3.2	3.8000000000000003	4.4
L4(5): 	5.425000000000001	6.9	8.375
L4(5): 	1.9	2.5	3.1
Class: 2 with RW: 1.0
 
 
</example>

</method>
