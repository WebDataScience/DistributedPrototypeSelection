<method>

	<name>Iterative-Partitioning Filter</name>

	<reference>  

		<ref>T. M. Khoshgoftaar and P. Rebours, “Improving software quality prediction by noise filtering techniques”, Journal of Computer Science and Technology, vol. 22, pp. 387–396, 2007.</ref>

	</reference>

	<generalDescription>  

		<type>Noisy Data Filter.</type>

		<objective>To remove noisy instances from the training data.</objective>

		<howWork>
The Iterative-Partitioning Filter removes noisy instances in multiple iterations until a stopping criterion is reached.
Initially, we have a set of noisy examples A = empty and a set of good data G = empty.

The basic steps of each iteration are:

1) Split the current training dataset E into n equal sized subsets.
2) Build a model with the C4.5 algorithm over each of these n subsets and use them to
evaluate the whole current training dataset E.
3) Add to A the noisy examples identified in E using a voting scheme.
4) Add to G a percentage y of the good data in E.
5) Remove the noisy examples and the good data from the training set.

The filtered data is formed by the remaining examples of E and the good data of G.
		</howWork>

		<parameterSpec>
			
			<param>numPartitions: number of partitions of the training set.
			</param>
			
			<param>filterType: consensus or majority.
			</param>
			
			<param>confidence: confidence for the C4.5 algorithm.
			</param>

			<param>itemsetsPerLeaf: minimum of itemsets per leaf for the C4.5 algorithm.
			</param>

			
		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>No</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>
	
	<example>
		
	</example>

</method>