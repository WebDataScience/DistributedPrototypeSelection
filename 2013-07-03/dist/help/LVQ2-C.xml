<method>

	<name>Learning Vector Quantization 2</name>

	<reference>  
		<ref>Kohonen, T. Self-Organizing Maps Self-Organizing Maps New Springer Series in Information Sciences, Vol. 30, Springer, Berlin, Heidelberg, New York, 1995, 1997, 2001. Third Extended Edition, 501 pages. ISBN 3-540-67921-9, ISSN 0720-678X </ref>
		<ref>Kohonen, T. The self organizing map (1990) Proceeding of the IEEE, 78:9, pp. 1464‚Äê1480.</ref>
	</reference>

	<generalDescription>  

		<type>Preprocess Method. Data Reduction. Prototype Generation. Noise Filter.</type>

		<objective>Reduce the size of the training set without losing precision or accuracy in order to a posterior classification</objective>

		<howWork>
		LVQ2 is similar to LVQ1, initialy it extracts randomly prototypes, the it cycles applying to each prototype the following rule.
		For each stochastic input sample x in the resulting set, the adjustments are performed for the two best-matching codebook vectors m_c and m_d, which are found using the minimum Euclidean distance criterion.
		If m_c and x belong to the same class, but m_d and x to different classes, respectively, and the sample x lie in a window between m_c and m_d, the update m_c and m_d.
		The update rewards m_c and penalize m_d in the same way as LVQ1 does.
				</howWork>

		<parameterSpec>  
			<param>Number of iterations: Integer value. Number of iterations of the algorithm.</param>
			<param>Percentage of prototypes: Real value. Desired size of the resulting set as percentage of training set size.</param>
			<param>Alpha0: Double value. Alpha constant in [0, 1].</param>
			<param>Window width: Double value. Window width constant in [0, 1].</param>			
		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>No</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Classification
Method: PG-LVQ2
Dataset: iris
Training set: iris-10-1tra.dat
Parameters: default values

We can see output set in Experiment\Results\PG-LVQ2:

@relation  iris_plants_database
@attribute sepalLength real[4.3,7.9]
@attribute sepalWidth real[2.0,4.4]
@attribute petalLength real[1.0,6.9]
@attribute petalWidth real[0.1,2.5]
@attribute class{Iris-setosa,Iris-versicolor,Iris-virginica}
@inputs sepalLength,sepalWidth,petalLength,petalWidth
@outputs class
5.1, 3.5, 1.4, 0.3, Iris-setosa
4.9, 3.1, 1.5, 0.1, Iris-setosa
4.4, 3.2, 1.3, 0.2, Iris-setosa
6.20443060282096, 2.8296298706125107, 4.646769267399174, 1.5542079940612767, Iris-versicolor
5.5, 2.4, 3.8, 1.1, Iris-versicolor
5.616503289181902, 2.6423786458291314, 4.374131059098671, 1.14025509791458, Iris-versicolor
5.9037123665512805, 2.6809496738841694, 5.06545985758086, 1.8056535555043365, Iris-virginica
6.9123670928044145, 3.106183546402207, 5.435244806411833, 2.1373469305724337, Iris-virginica
6.396059601, 2.788178803, 5.576357606, 2.0921192019999997, Iris-virginica
7.3, 2.9, 6.3, 1.8, Iris-virginica

</example>

</method>
