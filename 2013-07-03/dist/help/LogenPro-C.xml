<method>

	<name>LOGENPRO: The LOgic grammar Based GENetic PROgramming system</name>

	<reference>  

<ref>M.L. Wong, K.S. Leung. Data Mining using grammar based genetic programming and applications. 
Kluwer Academics Publishers (2000).</ref>

	</reference>

	<generalDescription>  

		<type>Classification model by generation of rule-based systems.</type>

		<objective>To obtain classifiers as a set of rules that better fits the training data.</objective>

		<howWork>LOGENPRO is a data mining system that combines Genetic Programming and Inductive Logic
		Programming	to induce knowledge from databases. The formalism is powerful enough to represent
		context-sensitive information and domain-dependent knowledge which can be used to accelerate the
		learning of knowledge. It is also very flexible and the knowledge acquired can be represented in
		different knowdelge representations such as logic programs and production rules.
		
		A rule is a statement in the format of "if antecedents then consequent", which is commonly used
		by human to represent knowledge. Rule learning tries to learn rules from a set of data. It can be
		modeled as a search problem of finding the best rules. Because the search space can be very
		large, a robust search algorithm is required. Thus, LOGENPRO is used as a possible approach.
		
		To apply LOGENPRO to rule learning, firstly a suitable representation has been designed to encode
		a rule in an individual. In LOGENPRO, a derivation tree is used to represent an individual, so
		a grammar for rules has been designed to create the appropriate derivation tree. Secondly, a
		set of suitable genetic operators has been used to evolve new individuals. Finally, it has been
		designed a suitable fitness function to evaluate the fitness value of an individual.
		</howWork>

		<parameterSpec>  
		    <param>Population Size</param>
		    <param>Number of Generations</param>
		    <param>Crossover Probability</param>			
		    <param>Mutation Probability</param>
		    <param>Dropping Condition Probability</param>
		    <param>Minimum Support value</param>
		    <param>w1 param in fitness function</param>
		    <param>w2 param in fitness function</param>															
		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>Yes</valueLess>
			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>
Problem type: Classification 
Method: Clas-LogenPro
Dataset: iris
Training set: from iris-10-1tra.dat to iris-10-10tra.dat
Test set: from iris-10-1tst.dat to  iris-10-10tst.dat
Test Show results: Vis-Clas-Check
Paremeters: By default.
Population Size = 200
Number of Generations = 500
Crossover Probability = 0.5
Mutation Probability = 0.4
Dropping Probability = 0.1
Minimum Support = 0.01
Fitness Weight 1 = 1.0
Fitness Weight 2 = 1.0

After the execution of RunKeel.jar we can see into the experiment/results/Vis-Clas-Check/TSTClas-LogenPro 
folder the classification results for the training and test sets:
	
TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=1.0 N/C=0.0 
Fold 1 : CORRECT=0.9333333333333333 N/C=0.0 
Fold 2 : CORRECT=1.0 N/C=0.0 
Fold 3 : CORRECT=0.9333333333333333 N/C=0.0 
Fold 4 : CORRECT=0.8666666666666667 N/C=0.0 
Fold 5 : CORRECT=0.8 N/C=0.0 
Fold 6 : CORRECT=1.0 N/C=0.0 
Fold 7 : CORRECT=0.8666666666666667 N/C=0.0 
Fold 8 : CORRECT=1.0 N/C=0.0 
Fold 9 : CORRECT=0.8666666666666667 N/C=0.0 
Global Classification Error + N/C:
0.07333333333333333 
stddev Global Classification Error + N/C:
0.06960204339273701 
Correctly classified:
0.9266666666666666 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.9481481481481482 N/C=0.0 
Fold 1 : CORRECT=0.9037037037037037 N/C=0.0 
Fold 2 : CORRECT=0.9481481481481482 N/C=0.0 
Fold 3 : CORRECT=0.9555555555555556 N/C=0.0 
Fold 4 : CORRECT=0.962962962962963 N/C=0.0 
Fold 5 : CORRECT=0.8592592592592593 N/C=0.0 
Fold 6 : CORRECT=0.9481481481481482 N/C=0.0 
Fold 7 : CORRECT=0.962962962962963 N/C=0.0 
Fold 8 : CORRECT=0.9481481481481482 N/C=0.0 
Fold 9 : CORRECT=0.962962962962963 N/C=0.0 
Global Classification Error + N/C:
0.059999999999999984 
stddev Global Classification Error + N/C:
0.031505437508350755 
Correctly classified:
0.9400000000000001 
Global N/C:
0.0 	
	</example>

</method>