<method>

	<name>Ordered incremental genetic algorithm</name>

	<reference>  

	<ref>	F. Zhu, S.U. Guan. Ordered incremental training with genetic algorithms. International Journal of Intelligent Systems 19:12 (2004) 1239-1256.</ref>

	</reference>

	<generalDescription>  

		<type> Pittsburgh Approach to learn a set of rules for classification</type>

		<objective>It builds a set of rules by means of a genetic algorithm by means of an incremental approach</objective>

		<howWork>
OIGA carries out the learning in two
steps: first, it learns one-condition rules (generated randomly) for each attribute, and then optimising their
values using a GA. Then, once all the attributes have
been explored separately, OIGA joins the obtained one-
condition rule sets ordered by their ﬁtness. This process
adds the one-condition rule sets to the current increasing
rule sets one by one, randomly merging the rules with
the same consequent from the best one-condition rule-
set.
This incremental process involves a new optimization
procedure in each merging step, in which the current
increasing rule sets are reﬁned by means of a GA (with
the same features as the previous one). This process
stops once all attributes have been added, obtaining a
rule set with all the attributes. Both genetic processes
use the accuracy rate as ﬁtness.

		</howWork>

		<parameterSpec>  

			<param>ProbMutation: Mutation probability</param>
			<param>CrossoverRate: Frequency of crossover application</param>
			<param>popSize: population size</param>
			<param>ruleNumber: number of rules of each individual</param>
			<param>stagnationLimit: maximum number of generations without improvement before restarting the process</param>
			<param>generationLimit: maximum number of possible generations </param>
			<param>SurvivorsPercent: percentage of survivors of the previous population when restarting</param>
			<param>AttributeOrder: considereder order for the attributes in the incremental learning process</param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>Yes</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>
Problem type: Classification 
Method: C-SVM
Dataset: wisconsin
Parameters: default values

Input data:
Training set: wisconsin-10-1tra.dat
Test set: wisconsin-10-1tst.dat


Output data:
Training set: result0.tra
Test set: result0.tst 


Output data: Training set: result0.tra
2 2
2 2
2 2
2 4
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
4 4
4 4
4 4
2 2
2 2
4 4
2 2
4 4
4 4
2 2
4 4
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
4 4
2 4
4 4
4 4
2 4
4 4
4 4
4 4
2 2
4 4
2 2
2 2
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
4 4
2 2
4 4
2 2
4 4
4 4
2 2
2 2
4 4
2 ?
4 4
2 2
2 2
2 2
2 2
2 2
2 4
2 2
2 2
4 4
4 4
4 4
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
4 4
4 4
4 4
2 2
4 4
4 4
4 4
2 2
4 4
2 ?
4 4
4 4
4 4
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
4 4
4 4
2 2
4 4
2 2
4 4
2 ?
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
4 4
2 2
4 4
2 2
4 4
4 4
2 2
2 2
4 4
2 2
2 2
2 2
4 4
4 4
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 ?
2 2
2 2
2 2
4 4
4 4
4 4
2 2
4 4
2 2
4 4
2 2
2 2
2 2
4 4
4 4
4 4
4 4
2 2
4 4
4 4
2 2
2 2
2 2
2 2
2 2
2 2
4 4
4 4
2 2
2 2
2 2
4 4
4 4
2 2
2 2
4 4
4 4
2 2
4 4
4 4
4 4
2 2
2 2
4 4
2 2
2 2
4 4
4 2
4 4
4 4
2 2
4 4
4 4
2 2
4 4
4 4
2 4
4 4
2 2
2 2
4 4
4 4
4 4
4 4
2 2
2 2
2 2
2 ?
2 2
2 2
4 4
4 4
2 2
2 2
2 2
4 4
2 ?
4 4
4 4
2 2
2 2
2 4
4 4
4 4
4 4
4 4
2 2
4 4
4 4
4 4
2 2
4 4
4 4
4 4
2 2
2 2
2 2
2 2
4 4
2 2
2 2
4 4
4 4
4 4
4 4
4 4
2 2
4 4
4 4
2 2
2 2
4 4
2 2
4 4
2 4
2 4
4 4
2 2
2 2
4 4
2 2
2 2
4 4
2 2
2 2
4 4
2 2
2 2
2 4
4 4
4 4
2 4
2 4
2 2
4 4
2 2
2 2
4 4
2 2
4 4
4 4
2 2
2 2
4 4
4 4
2 2
4 4
2 2
4 4
2 2
2 2
4 4
2 2
2 2
2 4
4 4
4 4
2 2
4 4
2 2
4 2
4 4
4 4
4 4
4 4
2 2
2 2
2 2
2 2
4 4
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
4 4
2 2
4 4
2 2
2 2
2 2
4 4
2 2
2 2
2 2
4 4
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 4
4 4
4 4
2 2
2 2
4 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 ?
4 4
2 2
2 2
2 2
4 4
2 2
4 4
4 4
4 4
2 2
2 2
2 2
2 2
2 2
4 4
4 4
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
4 4
4 4
2 2
2 2
2 2
4 4
4 4
4 4
4 4
2 2
4 4
2 2
2 2
2 ?
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
4 4
2 ?
2 2
2 2
4 4
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
4 4
4 4
2 2
2 2
4 4
2 2
2 2
2 2
2 2
4 4
4 4
2 2
2 2
2 2
4 4
2 2
4 4
2 2
4 2
4 4
4 4
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
4 4
4 4
2 2
4 2
2 2
4 4
4 4
2 2
2 2
2 2
2 2
2 ?
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
4 4
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 2
2 2
2 2
2 2
2 2
2 2
2 2
2 4
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
4 4
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2
2 2
4 4
4 4
4 4


Output data: Test set: result0.tst
2 2
2 2
4 4
2 2
4 4
2 2
4 4
4 ?
4 4
2 2
2 2
2 4
4 4
4 4
2 2
2 4
2 2
2 2
4 4
4 4
2 2
4 4
2 2
2 2
4 4
2 2
4 4
4 4
4 4
2 2
4 4
2 2
4 4
2 2
4 4
2 2
2 2
2 4
2 2
4 4
2 ?
2 2
2 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 4
4 4
4 4
2 2
2 2
2 2
4 4
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
4 4
2 2
2 2

</example>

</method>