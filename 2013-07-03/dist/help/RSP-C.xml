<method>

	<name>High training set size reduction by space partitioning and prototype abstraction (RSP)</name>

	<reference>  

		<ref> J.S.SÃ¡nchez: High training set size reduction by space partitioning and prototype abstraction </ref>

	</reference>

	<generalDescription>  

		<type>Preprocess Method. Data Reduction. Instance Generation. Non Evolutionary algorithm.</type>

		<objective> Reduce the size of the training set without losing precision or accuracy in order to a posterior classification</objective>

		<howWork>
            There are three differents algorithm depend of the parameter.
            
            RSP1:
		1. It takes the two farthest prototypes (a, b), and make partition of the set in order of distance to a and b.
		2. Add that sets to C.
		2. Find the least homogeneus part. It is, the part which its prototypes has more class-similarity.
		3. Take the set with two farthest points of that least homogeneus set. It will be used in 1.
		4. For each class, obtain the all the prototype of this class, and calculate the centroid. (We have not the same problem like Chen's algorithm this algorithm guarantess tha no class is empty after applying the algoritm, but it's possible that there is an increase of the number of prototypes)
        5. Add them to the reduced set.
                   
		</howWork>

		<parameterSpec>  

			<param>Number of Subsets: Integer value. Number of partition you want the algorithm generate to make the reduction. If you select 0 the algorithm to execute will be RSP3</param>
			<param>Subsets choice: {diameter, overlapping} Independently of the number of subsets, the algorithm decide if use RSP1 (diameter) or RSP2 (overlapping) to splits subsets. </param>

		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>

			<discretized>Yes</discretized>

			<integer>Yes</integer>

			<nominal>Yes</nominal>

			<valueLess>No</valueLess>

			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Generation
Method: IG-RSP
Dataset: iris
Training set: iris-10-1tra.dat
Parameters: default values (RSP1)

@relation  iris_plants_database
@attribute sepalLength real[4.3,7.9]
@attribute sepalWidth real[2.0,4.4]
@attribute petalLength real[1.0,6.9]
@attribute petalWidth real[0.1,2.5]
@attribute class{Iris-setosa,Iris-versicolor,Iris-virginica}
@inputs sepalLength,sepalWidth,petalLength,petalWidth
@outputs class
@relation  Iris_Plants_Database
@attribute sepalLength real[4.3,7.9]
@attribute sepalWidth real[2.0,4.4]
@attribute petalLength real[1.0,6.9]
@attribute petalWidth real[0.1,2.5]
@attribute class{Iris-setosa,Iris-versicolor,Iris-virginica}
@inputs sepalLength,sepalWidth,petalLength,petalWidth
@outputs class
@data
7.55, 2.9875, 6.375, 2.0625, Iris-virginica
7.7, 3.8, 6.7, 2.2, Iris-virginica
6.609090909090909, 3.209090909090909, 5.609090909090909, 2.3272727272727267, Iris-virginica
5.74, 2.7, 5.04, 2.04, Iris-virginica
6.25, 2.9375, 4.4375, 1.375, Iris-versicolor
6.4, 2.77, 5.33, 1.91, Iris-virginica
6.65, 2.8, 4.7, 1.45, Iris-versicolor
6.466666666666667, 3.2, 4.633333333333333, 1.5333333333333334, Iris-versicolor
6.1, 3.033333333333333, 5.133333333333333, 1.8, Iris-virginica
5.95, 3.3, 4.65, 1.7, Iris-versicolor
6.8, 3.05, 4.95, 1.6, Iris-versicolor
6.866666666666667, 3.166666666666667, 5.5, 1.9666666666666668, Iris-virginica
6.3, 2.3, 4.4, 1.3, Iris-versicolor
5.053658536585366, 3.453658536585366, 1.468292682926829, 0.2414634146341464, Iris-setosa
4.525, 2.8, 1.35, 0.25, Iris-setosa
5.513636363636364, 2.577272727272727, 3.85, 1.1636363636363636, Iris-versicolor
4.9, 2.5, 4.5, 1.7, Iris-virginica
5.55, 2.9, 4.5, 1.4, Iris-versicolor
6.2, 2.2, 4.5, 1.5, Iris-versicolor
6.0, 2.2, 5.0, 1.5, Iris-virginica
6.0, 2.7, 5.1, 1.6, Iris-versicolor
6.3, 2.8, 5.1, 1.5, Iris-virginica
6.1, 2.6, 5.6, 1.4, Iris-virginica
6.3, 2.5, 4.9, 1.5, Iris-versicolor


Results (one execution)):
Reduction =  82%
Training success = 95,6 %
Time = 0,117 s.

</example>

</method>