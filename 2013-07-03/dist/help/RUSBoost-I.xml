<method>
	<name>
		RUSBoost algorithm with C4.5 Decision Tree as Base Classifier
	</name>
	<reference>
		<ref>
			C. Seiffert, T. Khoshgoftaar, J. Van Hulse, and A. Napolitano. Rusboost: A hybrid approach to alleviating class imbalance,'' \emph{{IEEE} Transactions on Systems, Man and Cybernetics - part A, vol. 40, no. 1, pp. 185-197, 2010.
		</ref>
	</reference>
	<generalDescription>  
		<type>
			Ensemble of classifiers. Boosting. UnderSampling. Resampling.
		</type>
		<objective>
			To determine a set of decision trees that on the basis of answers to questions about the input attributes predicts correctly the value of the target attribute.
		</objective>
		<howWork>
			RUSBoost removes instances from the majority class by random undersampling the data-set in each iteration. In this case, it is not necessary to assign new weights to the instances. It is enough with simply normalizing the weights of the remaining instances in the new data-set with respect to their total sum of weights. After training a classifier, the weights of the original data-set instances are updated, then another sampling phase is applied (again, modifying the weight distribution). The repetition of this process also brings along more diversity in the training data, which generally benefits the ensemble learning.
        </howWork>
		<parameterSpec>  
			<param>
				prune: wether to prune or not prune the tree. It is a boolean value that determines if the algorithm applies a prune process after building the tree
			</param>
			<param>
				confidence: is the confidence level. It is a float value that determines what is the minimal confidence that must has a leaf in order to can be considered in the tree
			</param>
			<param>
				minItemsets: is the minimum number of item-sets per leaf. It is an integer value that determines how much data instances must contain a leaf in order to can be created
			</param>
			<param>
				Number of Classifiers: is the maximum number of iterations that the boosting procedure will be executed
			</param>
			<param>
				Train Method: is the method used to train the classifier in each iteration (using resampling or cost-sensitive classifier)
			</param>
			<param>
				% majority class: N% of the new data-set each iteration will be from the majority class (percentage of the majority class instances in each boosting iteration)
			</param>
		</parameterSpec>
		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>Yes</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>
	</generalDescription>
<example>
Problem type: Imbalanced
Method: RUSBoost algorithm with C4.5 Decision Tree as Base Classifier
Dataset: abalone9-18
Training set: abalone9-18-5-5-1tra.dat
Test set: abalone9-18-5-5-1tst.dat
Test Show results: TSTImb-RUSBoost
Parameters: default values

After the execution of RunKeel.jar we can see the classification results for the test set:

G-mean in Training: 0.9104428159429501
F-mean in Training: 0.44137931034482764
TPrate in Training: 0.9696969696969697
G-mean in Test: 0.603265403067209
F-mean in Test: 0.21052631578947367
TPrate in Test: 0.4444444444444444
Accuracy in training: 0.8613013698630136
Accuracy in test: 0.7959183673469388

We can also see the output and target classes for each case of the test set (result0.tst) in Experiment\Results\Imb-RUSBoost.abalone9-18:

@relation  abalone9-18
@attribute Sex{M,F,I}
@attribute Length real[0.075,0.815]
@attribute Diameter real[0.055,0.65]
@attribute Height real[0.0,1.13]
@attribute Whole_weight real[0.0020,2.8255]
@attribute Shucked_weight real[0.0010,1.488]
@attribute Viscera_weight real[5.0E-4,0.76]
@attribute Shell_weight real[0.0015,1.005]
@attribute Rings{positive,negative}
@inputs Sex,Length,Diameter,Height,Whole_weight,Shucked_weight,Viscera_weight,Shell_weight
@outputs Rings
@data
negative negative
negative negative
negative positive
negative negative
negative negative
positive negative
negative positive
negative positive
negative positive
negative negative
positive positive
negative negative
negative negative
positive negative
positive positive
positive negative
negative negative
negative negative
negative negative
negative negative
negative positive
negative negative
negative negative
negative negative
negative negative
negative positive
...
</example>

</method>
