<method>

	<name>Steady-State Genetic Algorithm for Extracting Fuzzy Classification Rules From Data</name>

	<reference>  
<ref>E.G. Mansoori, M.J. Zolghadri, S.D. Katebi. SGERD: A Steady-State Genetic Algorithm for Extracting Fuzzy Classification Rules From Data, IEEE Transactions on Fuzzy Systems 16:4 (2008) 1061-1071</ref> 
	</reference>

	<generalDescription>  

		<type>Evolutionary Fuzzy Rule Based Classification System</type>

		<objective>To extract a compact set of good fuzzy rules from numerical data</objective>

		<howWork>SGERD is a steady-state genetic algorithm, where its generations are finite and bounded to the problem dimension. Individual selection in this algorithm is nonrandom, and only the best ones can survive. Each parent produces a finite number of offspring through reproduction, whereas the crossover and mutation operators are very specific, and a few crossovers might be replaced by mutations. The fitness function used in SGERD is based on a rule evaluation criterion, very determinant in featuring the best rules among all candidates. SGERD stoppes when no new offspring are included in the population
		</howWork>

		<parameterSpec>  
			<param>Number of Q rules per class (0 to calculate heuristically): Maximum number of rules per class. If user want to calculate it heuristically he must put 0</param>
			<param>Rule evaluation criteria: Authors used 3 rule evaluation criteria in the paper. User can select
			  0) fCS (Aj -> Class Cj)
			  1) fF (Aj -> Class Cj)
			  2) f'F (Aj -> Class Cj)</param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>No</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>

	</generalDescription>

	<example>Problem type: Classification 
Method: Clas-Fuzzy-SGERD
Dataset: iris
Training set: iris-10-1tra.dat
Test set: iris-10-1tst.dat
Test Show results: Vis-Clas-Check
Parameters: default values

After the execution of RunKeel.jar we can see into the experiment/results/Vis-Clas-Check/TSTClas-Fuzzy-Ish-Selec folder the classification results for the training and test sets:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=1.0 N/C=0.0 
Global Classification Error + N/C:
0.0 
stddev Global Classification Error + N/C:
0.0 
Correctly classified:
1.0 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.9703703703703703 N/C=0.0 
Global Classification Error + N/C:
0.02962962962962963 
stddev Global Classification Error + N/C:
0.0 
Correctly classified:
0.9703703703703703 
Global N/C:
0.0

We can see also the Data Base and Rule Base generated in the files "result0e0.txt" and "result0e1.txt" 
respectively in the folder experiment/results/Clas-Fuzzy-SGERD/iris/:

@Number of Labels per variable: 2

sepalLength:
L_0(2): (0.6999999999999993,4.3,7.9)
L_1(2): (4.3,7.9,11.5)

sepalWidth:
L_0(2): (-0.40000000000000036,2.0,4.4)
L_1(2): (2.0,4.4,6.800000000000001)

petalLength:
L_0(2): (-4.9,1.0,6.9)
L_1(2): (1.0,6.9,12.8)

petalWidth:
L_0(2): (-2.3,0.1,2.5)
L_1(2): (0.1,2.5,4.8999999999999995)


@Number of Labels per variable: 3

sepalLength:
L_0(3): (2.4999999999999996,4.3,6.1)
L_1(3): (4.3,6.1,7.9)
L_2(3): (6.1,7.9,9.7)

sepalWidth:
L_0(3): (0.7999999999999998,2.0,3.2)
L_1(3): (2.0,3.2,4.4)
L_2(3): (3.2,4.4,5.6000000000000005)

petalLength:
L_0(3): (-1.9500000000000002,1.0,3.95)
L_1(3): (1.0,3.95,6.9)
L_2(3): (3.95,6.9,9.850000000000001)

petalWidth:
L_0(3): (-1.0999999999999999,0.1,1.3)
L_1(3): (0.1,1.3,2.5)
L_2(3): (1.3,2.5,3.6999999999999997)


@Number of Labels per variable: 4

sepalLength:
L_0(4): (3.0999999999999996,4.3,5.5)
L_1(4): (4.3,5.5,6.7)
L_2(4): (5.5,6.7,7.9)
L_3(4): (6.7,7.9,9.100000000000001)

sepalWidth:
L_0(4): (1.1999999999999997,2.0,2.8000000000000003)
L_1(4): (2.0,2.8000000000000003,3.6000000000000005)
L_2(4): (2.8000000000000003,3.6000000000000005,4.4)
L_3(4): (3.6000000000000005,4.4,5.200000000000001)

petalLength:
L_0(4): (-0.9666666666666668,1.0,2.966666666666667)
L_1(4): (1.0,2.966666666666667,4.933333333333334)
L_2(4): (2.966666666666667,4.933333333333334,6.9)
L_3(4): (4.933333333333334,6.9,8.866666666666667)

petalWidth:
L_0(4): (-0.7,0.1,0.8999999999999999)
L_1(4): (0.1,0.8999999999999999,1.7)
L_2(4): (0.8999999999999999,1.7,2.5)
L_3(4): (1.7,2.5,3.3)


@Number of Labels per variable: 5

sepalLength:
L_0(5): (3.3999999999999995,4.3,5.2)
L_1(5): (4.3,5.2,6.1)
L_2(5): (5.2,6.1,7.0)
L_3(5): (6.1,7.0,7.9)
L_4(5): (7.0,7.9,8.8)

sepalWidth:
L_0(5): (1.4,2.0,2.6)
L_1(5): (2.0,2.6,3.2)
L_2(5): (2.6,3.2,3.8000000000000003)
L_3(5): (3.2,3.8000000000000003,4.4)
L_4(5): (3.8000000000000003,4.4,5.0)

petalLength:
L_0(5): (-0.4750000000000001,1.0,2.475)
L_1(5): (1.0,2.475,3.95)
L_2(5): (2.475,3.95,5.425000000000001)
L_3(5): (3.95,5.425000000000001,6.9)
L_4(5): (5.425000000000001,6.9,8.375)

petalWidth:
L_0(5): (-0.5,0.1,0.7)
L_1(5): (0.1,0.7,1.3)
L_2(5): (0.7,1.3,1.9)
L_3(5): (1.3,1.9,2.5)
L_4(5): (1.9,2.5,3.1)


@Number of rules: 3

1: petalWidth IS L_0(3): Iris-setosa
2: petalWidth IS L_2(5): Iris-versicolor
3: petalLength IS L_3(5): Iris-virginica
 
 
</example>

</method>
