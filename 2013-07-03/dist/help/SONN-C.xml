<method>

	<name>SONN Neural Networks</name>

	<reference>  

		<ref>I.G. Smotroff, D.H. Friedman and D. Connolly. Self Organizing Modular Neural Networks. Seattle International Joint Conference on Neural Networks (IJCNN'91). Seattle (USA, 1991) 187-192.</ref>

	</reference>

	<generalDescription>  

		<type>Classification model by means of a constructive neural network</type>

		<objective>Building a constructive neural network made up of polynomial functions</objective>

		<howWork>Starting an empty networks new nodes are sequentially added. Each new node has a polynomial transfer function and its inputs are the input variables or the outputs of previously added nodes.
The connection weights of each new added node are optimised using a Levemberg - Marquard algorithm.
The model is useful for regression and two-class classification.</howWork>

		<parameterSpec>  

			<param>Tend: Final temperature</param>
			<param>Omega: Maximum number of nodes added per iteration</param>
			<param>MaxNodes: Maximum number of nodes</param>
			<param>To: Initial temperature</param>
			<param>alpha: Parameters for L-M algorithm</param>
			<param>a_Range: Maximum value for the randomly initialised weights</param>
			<param>LM_convergence: Tolerance for L-M algorithm convergence</param>
			<param>w_mse: Weight of the MSE term in the performance measure.</param>
			<param>w_k: Weight of the number of nodes in the performance measure.</param>
			<param>Threshold_0: Threshold for a value to be taken as 0.</param>
			<param>Threshold_1: Threshold for a value to be taken as 1.</param>

		</parameterSpec>

		<properties>

			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>No</valueLess>
			<impreciseValue>No</impreciseValue>

		</properties>

	</generalDescription>

	<example>Problem type: Classification 
Method: Clas-SONN
Dataset: pima
Training set: pima-10-1tra.dat
Test set: pima-10-1tst.dat
Test Show results: StatChekCL
Parameters: default values

After the execution of RunKeel.jar we can see into the experiment\results\StatCheckCL folder the classification results for the test set:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=0.7012987012987013 N/C=0.0 
Global Classification Error + N/C:
0.2987012987012987 
stddev Global Classification Error + N/C:
0.0 
Correctly classified:
0.7012987012987013 
Global N/C:
0.0 


We can also see the output and target classes for each case of the test set (result0.tst) in Experiment\Results\Clas-SONN:

@relation  pima_diabetes
@attribute preg real[0.0,17.0]
@attribute plas real[0.0,199.0]
@attribute pres real[0.0,122.0]
@attribute skin real[0.0,99.0]
@attribute insu real[0.0,846.0]
@attribute mass real[0.0,67.1]
@attribute pedi real[0.078,2.42]
@attribute age real[21.0,81.0]
@attribute class{tested_negative,tested_positive}
@inputs preg,plas,pres,skin,insu,mass,pedi,age
@outputs class
@data
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_positive
tested_negative tested_negative
tested_negative tested_negative
tested_negative tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_negative
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_positive tested_positive
tested_negative tested_negative

</example>

</method>