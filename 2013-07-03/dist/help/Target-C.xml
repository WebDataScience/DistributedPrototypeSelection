<method>

	<name>Tree Analysis with Randomly Generated and Evolved Trees</name>

	<reference>  
<ref>J. B. Gray and G. Fan. Classification tree analysis using TARGET. Computational Statistics &amp; Data Analysis, 
52:3 (2008) 1362-1372</ref> 
	</reference>

	<generalDescription>  

		<type>Hybrid Decision Tree/GA</type>

		<objective>To obtain a Forest of Rules that better suits the training data by means of a GA search</objective>

		<howWork>The Tree Analysis with Randomly Generated and Evolved Trees (TARGET) methodology
		is a novel approach that uses a GA to build decision trees in which each chromosome represents a complete decision tree. The population is
		initialised randomly with a pre-specified probability of adding a new condition (node) to the tree. To evaluate the
		fitness of each chromosome, the authors uses a measure based on the correct classifications and the length of the
		chromosome (number of conditions/nodes).

		The genetic search uses specific operators for crossover and mutation. In the case of crossover, a node swap or a
		subtree swap is applied. In the case of mutation, there are four possibilities: split set mutation, split rule
		mutation, node swap mutation and subtree swap mutation. It also uses elitism (called cloning) and reinitialisation
		(called transplantation) to reach a good trade-off between convergence and diversity.
		</howWork>

		<parameterSpec>  
			<param>Probability of splitting a node</param>
			<param>Number of Total Generations for the GA</param>
			<param>Number of Trees generated by crossover</param>
			<param>Number of Trees generated by mutation</param>
			<param>Number of Trees generated by clonation</param>
			<param>Number of Trees generated by immigration</param>
		</parameterSpec>

		<properties>
			<continuous>Yes</continuous>
			<discretized>Yes</discretized>
			<integer>Yes</integer>
			<nominal>Yes</nominal>
			<valueLess>No</valueLess>
			<impreciseValue>No</impreciseValue>
		</properties>

	</generalDescription>

	<example>Problem type: Classification 
Method: Clas-Target
Dataset: iris
Training set: iris-10-1tra.dat
Test set: iris-10-1tst.dat
Test Show results: Vis-Clas-Check
Parameters: default values

After the execution of RunKeel.jar we can see into the experiment/results/Vis-Clas-Check/TSTClas-Target folder the classification results for the training and test sets:

TEST RESULTS
============
Classifier= 
Fold 0 : CORRECT=0.7333333333333334 N/C=0.0 
Global Classification Error + N/C:
0.26666666666666666 
stddev Global Classification Error + N/C:
0.0 
Correctly classified:
0.7333333333333334 
Global N/C:
0.0 

TRAIN RESULTS
============
Classifier= 
Summary of data, Classifiers: 
Fold 0 : CORRECT=0.8296296296296296 N/C=0.0 
Global Classification Error + N/C:
0.17037037037037037 
stddev Global Classification Error + N/C:
0.0 
Correctly classified:
0.8296296296296296 
Global N/C:
0.0 


We can see also the Tree Rule generated in the file "result0e0.txt" in the folder experiment/results/Clas-Target.iris/:

if ( 0.6420793080800398*petalLength + 0.9479580293288357*sepalLength &lt;= 6.681455010217952 ) then{
	class = Iris-setosa 
	}
else{ 
	 if ( sepalLength &lt;= 6.1 ) then{
		class = Iris-versicolor 
		}
	else{ 
		class = Iris-virginica 
		}
	}
}

</example>

</method>
