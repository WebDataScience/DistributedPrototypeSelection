/***********************************************************************

	This file is part of KEEL-software, the Data Mining tool for regression, 
	classification, clustering, pattern mining and so on.

	Copyright (C) 2004-2010
	
	F. Herrera (herrera@decsai.ugr.es)
    L. Sánchez (luciano@uniovi.es)
    J. Alcalá-Fdez (jalcala@decsai.ugr.es)
    S. García (sglopez@ujaen.es)
    A. Fernández (alberto.fernandez@ujaen.es)
    J. Luengo (julianlm@decsai.ugr.es)

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see http://www.gnu.org/licenses/
  
**********************************************************************/

/**
 * <p>
 * @author Written by Albert Orriols (La Salle, Ramón Llull University - Barcelona)  28/03/2004
 * @author Modified by Xavi Solé (La Salle, Ramón Llull University - Barcelona) 03/12/2008
 * @version 1.1
 * @since JDK1.2
 * </p>
 */

/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package keel.Algorithms.Genetic_Rule_Learning.XCS.KeelParser;
import java.io.*;
import java.util.*;
import java.lang.*;

public class ParserTokenManager implements ParserConstants
{
  public static void CommonTokenAction(Token t) {
    //System.out.println ("Token: "+t.image);	
    if (Parser.tokenImage[t.kind].toString().equals("<IDENT>") || Parser.tokenImage[t.kind].toString().equals("<TIPUS_SIMPLE>") || Parser.tokenImage[t.kind].toString().equals("<BOOLEAN_CONST>")){
        t.image = t.image.toLowerCase();
    }
    if (Parser.tokenImage[t.kind].toString().equals("<ERR_LEX>")){
        System.out.println("ERR_LEX:  Caracter ["+t.image+"] desconegut en la linia "+t.beginLine+" columna "+t.beginColumn);
    }

  }
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8041000000000L) != 0L || (active1 & 0x108240L) != 0L)
         {
            jjmatchedKind = 103;
            return 9;
         }
         if ((active0 & 0xf401c010880000L) != 0L || (active1 & 0x2250000L) != 0L)
         {
            jjmatchedKind = 103;
            return 50;
         }
         if ((active0 & 0x20004020000L) != 0L || (active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 85;
         }
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 103;
            return 6;
         }
         if ((active0 & 0x2001000000L) != 0L || (active1 & 0x80100L) != 0L)
         {
            jjmatchedKind = 103;
            return 75;
         }
         if ((active0 & 0x2004000L) != 0L || (active1 & 0x20c20L) != 0L)
         {
            jjmatchedKind = 103;
            return 86;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 38;
         }
         if ((active0 & 0xa000e00e08751a00L) != 0L || (active1 & 0x40301eL) != 0L)
         {
            jjmatchedKind = 103;
            return 84;
         }
         if ((active0 & 0x1103080120000500L) != 0L || (active1 & 0x8000080L) != 0L)
         {
            jjmatchedKind = 103;
            return 34;
         }
         if ((active0 & 0x400000000000a000L) != 0L || (active1 & 0x1804000L) != 0L)
         {
            jjmatchedKind = 103;
            return 67;
         }
         return -1;
      case 1:
         if ((active0 & 0xf1ecffce0eff4b00L) != 0L || (active1 & 0xe77bfffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 84;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 49;
         }
         if ((active0 & 0x3002001001000L) != 0L || (active1 & 0x80000L) != 0L)
            return 84;
         if ((active0 & 0x120000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 35;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 58;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 8;
         }
         if ((active0 & 0xa000L) != 0L || (active1 & 0x1804000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 66;
         }
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 33;
         }
         return -1;
      case 2:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 57;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 48;
         }
         if ((active0 & 0xc000000000020000L) != 0L || (active1 & 0x1L) != 0L)
            return 84;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
            return 84;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x1800000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 65;
         }
         if ((active0 & 0x31ecffdf2ffd6b00L) != 0L || (active1 & 0xe7ffffeL) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 84;
         }
         return -1;
      case 3:
         if ((active0 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 47;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 56;
         }
         if ((active0 & 0x31ec1fdb2df16700L) != 0L || (active1 & 0xe3afff0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 84;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x1800000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 64;
         }
         if ((active0 & 0xe004020c0800L) != 0L || (active1 & 0x45000eL) != 0L)
            return 84;
         return -1;
      case 4:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 84;
         }
         if ((active0 & 0x8000L) != 0L || (active1 & 0x1800000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
            return 63;
         }
         if ((active0 & 0x31ecffc12df06700L) != 0L || (active1 & 0xe7ffffeL) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
            return 84;
         }
         if ((active0 & 0x1a00010000L) != 0L)
            return 84;
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
            return 55;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000L) != 0L || (active1 & 0x1800000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 84;
         }
         if ((active0 & 0x8000000L) != 0L || (active1 & 0x8000L) != 0L)
            return 84;
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active0 & 0x31ecffc135f06700L) != 0L || (active1 & 0xe7f7ffeL) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 84;
         }
         return -1;
      case 6:
         if ((active0 & 0x31ecffc035f0e600L) != 0L || (active1 & 0x7ff7fc0L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 84;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 53;
         }
         if ((active0 & 0x100000100L) != 0L || (active1 & 0x800003eL) != 0L)
            return 84;
         return -1;
      case 7:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
            return 52;
         }
         if ((active0 & 0x11e8ffc035f0e600L) != 0L || (active1 & 0x7fb7e40L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
            return 84;
         }
         if ((active0 & 0x2004000000000000L) != 0L || (active1 & 0x40180L) != 0L)
            return 84;
         return -1;
      case 8:
         if ((active0 & 0x100003c010308000L) != 0L || (active1 & 0x40L) != 0L)
            return 84;
         if ((active0 & 0x1e8fc0025c06600L) != 0L || (active1 & 0x7fb7e00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
            return 84;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
            return 51;
         }
         return -1;
      case 9:
         if ((active0 & 0x1e8fc0025802000L) != 0L || (active1 & 0x7fa7e00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 9;
            return 84;
         }
         if ((active0 & 0x404600L) != 0L || (active1 & 0x10000L) != 0L)
            return 84;
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
            return 84;
         }
         return -1;
      case 10:
         if ((active0 & 0x1f8fc0025802000L) != 0L || (active1 & 0x7ea7e00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 10;
            return 84;
         }
         if ((active1 & 0x100000L) != 0L)
            return 84;
         return -1;
      case 11:
         if ((active0 & 0x1f8ec0025802000L) != 0L || (active1 & 0x56a7c00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
            return 84;
         }
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x2800200L) != 0L)
            return 84;
         return -1;
      case 12:
         if ((active0 & 0x800000L) != 0L)
            return 84;
         if ((active0 & 0x1f8ec0025002000L) != 0L || (active1 & 0x56a7c00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 12;
            return 84;
         }
         return -1;
      case 13:
         if ((active0 & 0x30400020002000L) != 0L || (active1 & 0x4020000L) != 0L)
            return 84;
         if ((active0 & 0x1c8ac0005000000L) != 0L || (active1 & 0x1687c00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
            return 84;
         }
         return -1;
      case 14:
         if ((active0 & 0x100a80005000000L) != 0L || (active1 & 0x1487c00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 14;
            return 84;
         }
         if ((active0 & 0xc8040000000000L) != 0L || (active1 & 0x200000L) != 0L)
            return 84;
         return -1;
      case 15:
         if ((active0 & 0x100a80004000000L) != 0L || (active1 & 0x1487c00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 15;
            return 84;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 84;
         return -1;
      case 16:
         if ((active0 & 0xa00000000000L) != 0L || (active1 & 0x1000000L) != 0L)
            return 84;
         if ((active0 & 0x100080004000000L) != 0L || (active1 & 0x487c00L) != 0L)
         {
            if (jjmatchedPos != 16)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 16;
            }
            return 84;
         }
         return -1;
      case 17:
         if ((active0 & 0x100880004000000L) != 0L || (active1 & 0x483c00L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 17;
            return 84;
         }
         if ((active1 & 0x4000L) != 0L)
            return 84;
         return -1;
      case 18:
         if ((active0 & 0x100880004000000L) != 0L || (active1 & 0x483400L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 18;
            return 84;
         }
         if ((active1 & 0x800L) != 0L)
            return 84;
         return -1;
      case 19:
         if ((active1 & 0x81400L) != 0L)
            return 84;
         if ((active0 & 0x100880004000000L) != 0L || (active1 & 0x402000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 19;
            return 84;
         }
         return -1;
      case 20:
         if ((active0 & 0x880004000000L) != 0L || (active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 20;
            return 84;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 84;
         return -1;
      case 21:
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x400000L) != 0L)
            return 84;
         if ((active0 & 0x80004000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 21;
            return 84;
         }
         return -1;
      case 22:
         if ((active0 & 0x4000000L) != 0L)
            return 84;
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 22;
            return 84;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 97);
      case 59:
         return jjStopAtPos(0, 94);
      case 61:
         return jjStopAtPos(0, 93);
      case 91:
         return jjStopAtPos(0, 95);
      case 93:
         return jjStopAtPos(0, 96);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200100000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400010000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000000000200L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8041000000000L, 0x108240L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20004020000L, 0x4000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800001000L, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe00000200800L, 0x400010L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2001000000L, 0x80100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x2000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1103080120000500L, 0x8000080L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000000a000L, 0x1804000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2004000L, 0x20c20L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf401c010880000L, 0x2250000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x8040000L, 0xeL);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0x1L);
      case 65:
      case 97:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000400L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040000L, active1, 0xeL);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000140209a000L, active1, 0x1875000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x401c000000000L, active1, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000200100200L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 84);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000220800L, active1, 0x400010L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x18040120000000L, active1, 0x108240L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x4002020L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80010000100L, active1, 0x8000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0xc00L);
      case 85:
      case 117:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000L, active1, 0x80000L);
      case 88:
      case 120:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 84);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000000800000L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 84);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 84);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 84);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40010004200L, active1, 0x4c00L);
      case 68:
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 84);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x1800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x409c002000000L, active1, 0xa000020L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000110000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xe00000000800L, active1, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x801000000L, active1, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000100L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000324a02000L, active1, 0x200180L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000400L, active1, 0x100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x200080c0000L, active1, 0x405024eL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400400000L, active1, 0xb010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 84);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000400L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000100L, active1, 0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 68:
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 84);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x8000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x20e0000000800000L, active1, 0x308190L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20010010000L, active1, 0x400200eL);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000800000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x1000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100008002000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40100000200L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4e1d000004000L, active1, 0x2450e00L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20208000L, active1, 0x1820000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xeL);
      case 65:
      case 97:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 84);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 84);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 84);
         return jjMoveStringLiteralDfa5_0(active0, 0x401c000000000L, active1, 0x2000200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x1800180L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x104000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100001002000L, active1, 0xa0040L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100e80100004000L, active1, 0xc20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20020000100L, active1, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0x2000L);
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 84);
         return jjMoveStringLiteralDfa5_0(active0, 0x2010000010000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0xe0000004800000L, active1, 0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x8040000000200L, active1, 0x8000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000200000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000L, active1, 0x8000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x401c000000000L, active1, 0x2000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10e00020000000L, active1, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000080000000000L, active1, 0x8000040L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000200000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x500L, active1, 0x400010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0xe0000010800000L, active1, 0x200020L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100200L, active1, 0x50180L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x4000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000L, active1, 0x84008L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000L, active1, 0xc00L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 84);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000408000L, active1, 0x1801200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8040000000000L, active1, 0x100000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 84);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 84);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 84);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000200000L, active1, 0x4000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8040000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000400000L, active1, 0x400000L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0x4002000L, active1, 0x1000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0x180L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10008000L, active1, 0x1240L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0xe00000000000L, active1, 0x42000L);
      case 77:
      case 109:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0x30004000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x4010000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0x80000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x40010000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 84);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000080020104400L, active1, 0x20c00L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x800000L);
      case 89:
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x4000000L);
      case 65:
      case 97:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 84);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1010000L);
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 84);
         return jjMoveStringLiteralDfa8_0(active0, 0x50008000000400L, active1, 0x2200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x400001000000L, active1, 0x80040L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 84);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100080020004200L, active1, 0x820c00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000002000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000000000L, active1, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1080000000800000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x8040004000000L, active1, 0x200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0x100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x20010000000000L, active1, 0x400000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
      case 89:
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 84);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 84);
         break;
      case 65:
      case 97:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 84);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x21000L);
      case 66:
      case 98:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L, active1, 0x400c00L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2200000L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 84);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000200L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0x100000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 84);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 84);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x804000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80080020800000L, active1, 0x12000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0xa00000000400L, active1, 0x5000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x120100000402000L, active1, 0x80200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8040000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 84);
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000002000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x40a00004000000L, active1, 0x4080000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x21000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x8040000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x80020000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x6000L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 9, 84);
         break;
      case 83:
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 10, 84);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 84);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x10400000000000L, active1, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x3200000L);
      case 87:
      case 119:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 84);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0x2200200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0xa00000000000L, active1, 0x4000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0x400c00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L, active1, 0x1000000L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 84, 84);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0x800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x8040001000000L, active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x90000000000000L, active1, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000004002000L, active1, 0x20000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000800000L, active1, 0x1024000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x30a00020002000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L, active1, 0x2400L);
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 44, 84);
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L, active1, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0x401000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 73, 84);
         break;
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 84);
         return jjMoveStringLiteralDfa12_0(active0, 0x48040000000000L, active1, 0x280000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4000000L);
      case 87:
      case 119:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 87, 84);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x100a00000000000L, active1, 0x4004000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L, active1, 0x80400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x48040000000000L, active1, 0x200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(12, 23, 84);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000001002000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L, active1, 0x1020000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(13, 29, 84);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 52, 84);
         return jjMoveStringLiteralDfa14_0(active0, 0x80000004000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x404000L);
      case 78:
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 13, 84);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 53, 84);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x480c0000000000L, active1, 0x200c00L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000001000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 46, 84);
         break;
      case 84:
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 81, 84);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(13, 90, 84);
         return jjMoveStringLiteralDfa14_0(active0, 0xa00000000000L, active1, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
static private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0xa00000000000L, active1, 0x1002000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 42, 84);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 51, 84);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 54, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 85, 84);
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 55, 84);
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
static private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L, active1, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0xa00000000000L, active1, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(15, 24, 84);
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000000L, active1, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
static private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(16, 88, 84);
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L, active1, 0x2400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
static private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x400400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x1000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80000L);
      case 78:
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(17, 78, 84);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
static private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(18, 75, 84);
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, active1);
}
static private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(17, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1);
      return 19;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(19, 74, 84);
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000L);
      case 78:
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(19, 76, 84);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(19, 83, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, active1);
}
static private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(18, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1);
      return 20;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(20, 77, 84);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000000L, active1, 0x400000L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 56, 84);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, active1);
}
static private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(19, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1);
      return 21;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x80000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(21, 86, 84);
         break;
      case 82:
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 47, 84);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, active1);
}
static private final int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(20, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x80000000000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(22, 26, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
static private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 43, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 85;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 34:
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(30, 31);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 37)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffff00000200L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar != 37)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xffffffff00000200L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(4);
                  break;
               case 13:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 26:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xffffffff00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if (curChar == 39 && kind > 100)
                     kind = 100;
                  break;
               case 29:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0xfffffff000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 34 && kind > 102)
                     kind = 102;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAddStates(0, 3);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar != 46)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(81);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(82);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  else if ((0x80000000800000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(7, 8);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(9, 11);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(12, 14);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(15, 16);
                  else if ((0x80000000800000L & l) != 0L)
                     jjCheckNAdd(23);
                  else if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(23);
                  else if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(21);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x80000000800000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x800000008L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x10000000100000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                  }
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(42);
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(84);
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 1:
                  if ((0x7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x100000001000000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 7:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x10000000100000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 12:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x200000002000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 15:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x80000000800000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 22:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 23:
                  if ((0x1000000010L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 24:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 27:
                  if ((0x7ffffffffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x7ffffffffffffffL & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 32:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 36:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(12, 14);
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 43:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 61:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(7, 8);
                  break;
               case 68:
                  if ((0x8000000080000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 69:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 71:
                  if ((0x1000000010L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 72:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if ((0x200000002L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 83:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(84);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 85 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   78, 79, 80, 82, 75, 21, 76, 67, 69, 50, 59, 61, 38, 41, 45, 34, 
   36, 30, 31, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\75", "\73", "\133", 
"\135", "\54", null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x7ffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[85];
static private final int[] jjstateSet = new int[170];
static protected char curChar;
public ParserTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public ParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 85; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002700L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 106)
   {
      jjmatchedKind = 106;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}

